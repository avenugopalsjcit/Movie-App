using System;
using System.Linq;
using System.Data;
using Oracle.DataAccess.Client;
using System.Configuration;
using System.Globalization;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;


namespace SCAdminDAL
{
    public class GlobalReferenceDAL
    {
        OracleDataAdapter dad;

        DataSet rsPopChars = new DataSet();
        DataSet rsCharacteristics = new DataSet();
        DataTable dt = new DataTable();
        private GetDataFromDB objGetDataFromDB = new GetDataFromDB();
        OracleConnection oConn = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
         private StringBuilder strQuery = new StringBuilder();

        public DataTable GetGridAvailabilityDetails()
        {
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();

            string str = string.Empty;

            str = @"select uc1.AVAIL_DESC,uc1.AVAIL_ABBR,uc1.AVAIL_VALID_CD,uc1.AVAIL_CD,
                    (select User_name from CSU_USER where EMP_Id = uc1.Created_emp_id) Created_By, to_char(uc1.Created_dt,'DD-MON-YYYY HH24:MI') as Created_dt, (select User_name from CSU_USER where EMP_Id = uc1.Updated_emp_id) Updated_By," +
                                        "to_char(uc1.Updated_dt,'DD-MON-YYYY HH24:MI') as Updated_dt from CSU_REF_AVAILABILITY uc1 order by uc1.AVAIL_DESC";

            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);

            return objGetDataFromDB.GetDataTable(str.ToString());

        }

        public DataTable GetGridAdminBtgfr()
        {
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();

            string str = string.Empty;

            str = @"select btgfr,description from csu_btgfr where btgfr > '0' order by btgfr asc,description";

            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);

            return objGetDataFromDB.GetDataTable(str.ToString());

        }

        public int MaxAvailCD()
        {
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();
            string str = @"Select Max(avail_cd) from CSU_REF_AVAILABILITY";
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            return Convert.ToInt32(objGetDataFromDB.GetSingleRowFromDB(str));
        }

        public int AdminAvailInsert(string strAvailCd, string strAvailDesc, string strAvailAbbr, string strAvailValidCd, string User_id)
        {
            int status = 0;
            int validbool = 0;
            string str = string.Empty;
            if (Convert.ToBoolean(strAvailValidCd) == true)
            {
                validbool = 1;
            }
            else
            {
                validbool = 0;
            }
            int id = Convert.ToInt32(strAvailCd);
            
            str = @"select count(*) from  CSU_REF_AVAILABILITY where Avail_Desc='"+strAvailDesc+"'";
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            oConn.Open();
             status = Convert.ToInt32(cmd.ExecuteScalar());
            oConn.Close();
            if (status != 0)
            {
                return status;
            }
            else
            {
                str = @"INSERT INTO CSU_REF_AVAILABILITY ( AVAIL_CD, AVAIL_DESC, AVAIL_ABBR,CREATED_EMP_ID,
                        AVAIL_VALID_CD,CREATED_DT,UPDATED_EMP_ID,UPDATED_DT) VALUES (" + id + ",'" + strAvailDesc + "' ,'"
                           + strAvailAbbr + "','" + User_id + "'," + validbool + ",   sysdate,'" + User_id + "',sysdate)";
            }
            OracleCommand cmdin = new OracleCommand(str.ToString(), oConn);
            oConn.Open();
            status = cmdin.ExecuteNonQuery();
            oConn.Close();
            return 0;
        }

        public int AdminAvailUpdate(string strAvailDesc, string strAvailAbbr, string strAvailvalidCd, string User_id, string strAvailCd)
        {

            int validbool = 0;
            //DateTime date = DateTime.ParseExact(DateTime.Now.Date.ToString(), "dd/MM/yyyy", null);
            string end_date = String.Format("{0:dd-MMM-yyyy HH:mm}", DateTime.Now);

            if (Convert.ToBoolean(strAvailvalidCd) == true)
            {
                validbool = 1;
            }
            else
            {
                validbool = 0;
            }
            int id = Convert.ToInt32(strAvailCd);
            string str = @"update CSU_REF_AVAILABILITY set  
                        avail_desc='" + strAvailDesc + "',avail_abbr='" + strAvailAbbr + "', avail_valid_cd =" + validbool +
                            ", updated_emp_id ='" + User_id + "',updated_dt=sysdate where avail_cd =" + id;
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            oConn.Open();
            int status = cmd.ExecuteNonQuery();
            oConn.Close();
            return status;
        }

        public int AdminAvailDelete(string strAvailCd)
        {

            string str = @"Delete from CSU_REF_AVAILABILITY where avail_cd =" + strAvailCd;
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            oConn.Open();
            int status = cmd.ExecuteNonQuery();
            oConn.Close();
            return status;
        }
        public DataTable AdminAvailPopupGrid(string strAvailCd)
        {
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();
            string str = @"SELECT CREATED_EMP_ID,  TO_CHAR(CREATED_DT,'DD-MON-YYYY HH24:MI') AS CREATED_DT,  UPDATED_EMP_ID,  TO_CHAR(UPDATED_DT,'DD-MON-YYYY HH24:MI') AS UPDATED_DT FROM CSU_REF_AVAILABILITY
                            WHERE avail_cd=" + strAvailCd;
            //OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);

            return objGetDataFromDB.GetDataTable(str.ToString());
        }

        #region Port to Access Speed
        public DataSet GetPortToAccessSpeed(int C_PORT_SPEED, int C_ACCESS_SPEED, string C_HVPN_PORT_SPEED, string C_ACCESS_SPEED_DOWN_UP)
        {
            DataSet dsresult = new DataSet();
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();
            string str = @"select distinct CHAR_ID, CHAR_NAME, CHAR_TYPE_ID, CHAR_DESC, CHAR_UNIT_OF_MEASURE, CREATED_EMP_ID, CREATED_DT, UPDATED_EMP_ID, UPDATED_DT, CHAR_ACTUAL_VALUE, CHAR_UPPER_RANGE, CHAR_LOWER_RANGE, CHAR_VALID_CD, CHAR_NUM_VALUE, CHAR_ACTUAL_VALUE_2, CHAR_UNIT_OF_MEASURE_2, CHAR_NUM_VALUE_2 FROM CSU_REF_VALID_CHAR WHERE CHAR_TYPE_ID = " + C_PORT_SPEED + "  and char_id in (1)  ORDER BY CHAR_NUM_VALUE";//and char_id in (1,162232,2,162230,162245,29561,4,162243,162236,162242,6,162241,162225,162235,162233,3561,172961,172962,162238,162231,162227,24,3170,5501,30,31,9701,5001,162228,162239,762,172963,763)
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

            ////mapped records
            str = string.Empty;
            str = @"Select distinct a.CHAR_ID,a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE,b.PORT_SPEED_CHAR_ID FROM CSU_REF_VALID_CHAR a, PORT_TO_ACCESS_SPEEDS b WHERE CHAR_TYPE_ID = " + C_ACCESS_SPEED + " AND a.CHAR_ID = b.access_speed_char_id  ORDER BY CHAR_NUM_VALUE";//AND b.port_speed_char_id = 1
            cmd = new OracleCommand(str.ToString(), oConn);
            dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));
           

            ////mapped records
            str = string.Empty;
            str = @"select CHAR_TYPE_ID,UPPER(TRIM(CHAR_TYPE_NAME))  as CHAR_TYPE_NAME from CSU_REF_CHAR_TYPE where UPPER(TRIM(CHAR_TYPE_NAME)) in ('" + C_HVPN_PORT_SPEED + "','" + C_ACCESS_SPEED_DOWN_UP + "')";
            cmd = new OracleCommand(str.ToString(), oConn);
            dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));
            return dsresult;
        }

        public DataSet GetPortAccessSpeedDetails(int Char_id, int C_ACCESS_SPEED, string C_ACCESS_SPEED_DOWN_UP, string type, int C_ACCESS_TYPE)
        {
            DataSet dsresult = new DataSet();
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();
            //string str = @"select distinct CHAR_ID, CHAR_NAME, CHAR_TYPE_ID, CHAR_DESC, CHAR_UNIT_OF_MEASURE, CREATED_EMP_ID, CREATED_DT, UPDATED_EMP_ID, UPDATED_DT, CHAR_ACTUAL_VALUE, CHAR_UPPER_RANGE, CHAR_LOWER_RANGE, CHAR_VALID_CD, CHAR_NUM_VALUE, CHAR_ACTUAL_VALUE_2, CHAR_UNIT_OF_MEASURE_2, CHAR_NUM_VALUE_2 FROM CSU_REF_VALID_CHAR WHERE CHAR_TYPE_ID = " + C_PORT_SPEED + "  and char_id =" + Char_id + "  ORDER BY CHAR_NUM_VALUE";//and char_id in (1,162232,2,162230,162245,29561,4,162243,162236,162242,6,162241,162225,162235,162233,3561,172961,172962,162238,162231,162227,24,3170,5501,30,31,9701,5001,162228,162239,762,172963,763)
           // OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            //dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

            ////mapped records
            string str = string.Empty;
            if (type == "NORMAL")
            {
               //str = @"Select distinct a.CHAR_ID,a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE,b.PORT_SPEED_CHAR_ID FROM CSU_REF_VALID_CHAR a, PORT_TO_ACCESS_SPEEDS b WHERE CHAR_TYPE_ID = " + C_ACCESS_SPEED + " AND a.CHAR_ID = b.access_speed_char_id  AND b.port_speed_char_id =" + Char_id + " ORDER BY CHAR_NUM_VALUE";//AND b.port_speed_char_id = 1
                str = @"SELECT DISTINCT   a.CHAR_ID,a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE, a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2,a.CHAR_NUM_VALUE, b.PORT_SPEED_CHAR_ID,c.CHAR_ID as CHAR_ID_Map,c.CHAR_NAME as CHAR_NAME_Map, c.CHAR_TYPE_ID as CHAR_TYPE_ID_Map, c.CHAR_ACTUAL_VALUE as CHAR_ACTUAL_VALUE_Map, c.CHAR_UNIT_OF_MEASURE as CHAR_UNIT_OF_MEASURE_Map, c.CHAR_ACTUAL_VALUE_2 as CHAR_ACTUAL_VALUE_2_Map, c.CHAR_UNIT_OF_MEASURE_2 as CHAR_UNIT_OF_MEASURE_2_Map, c.CHAR_NUM_VALUE  as CHAR_NUM_VALUE_Map FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b,  CSU_REF_VALID_CHAR c,PORT_TO_ACCESS_SPEEDS m   WHERE a.CHAR_TYPE_ID =  " + C_ACCESS_SPEED + " AND a.CHAR_ID = b.access_speed_char_id AND b.port_speed_char_id =" + Char_id + " AND m.port_speed_char_id   = b.port_speed_char_id AND c.CHAR_ID = m.access_type_char_id AND m.access_speed_char_id = a.CHAR_ID AND c.CHAR_TYPE_ID = " + C_ACCESS_TYPE + "";
            }
            else {
                //str = @"Select distinct a.CHAR_ID, a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE,a.CHAR_NUM_VALUE_2,b.PORT_SPEED_CHAR_ID FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b  WHERE CHAR_TYPE_ID = ( SELECT DISTINCT CHAR_TYPE_ID FROM CSU_REF_CHAR_TYPE WHERE UPPER(TRIM(CHAR_TYPE_NAME)) = '" + C_ACCESS_SPEED_DOWN_UP + "')  AND a.CHAR_ID = b.access_speed_char_id  AND b.port_speed_char_id = " + Char_id + " ORDER BY CHAR_NUM_VALUE,CHAR_NUM_VALUE_2";//AND b.port_speed_char_id = 1
                str = @"SELECT DISTINCT a.CHAR_ID,a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2,a.CHAR_NUM_VALUE,a.CHAR_NUM_VALUE_2,b.PORT_SPEED_CHAR_ID,c.CHAR_ID AS CHAR_ID_Map,c.CHAR_NAME AS CHAR_NAME_Map,c.CHAR_TYPE_ID AS CHAR_TYPE_ID_Map,c.CHAR_ACTUAL_VALUE AS CHAR_ACTUAL_VALUE_Map, c.CHAR_UNIT_OF_MEASURE AS CHAR_UNIT_OF_MEASURE_Map,c.CHAR_ACTUAL_VALUE_2 AS CHAR_ACTUAL_VALUE_2_Map,c.CHAR_UNIT_OF_MEASURE_2 AS CHAR_UNIT_OF_MEASURE_2_Map,c.CHAR_NUM_VALUE AS CHAR_NUM_VALUE_Map FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b,CSU_REF_VALID_CHAR c,PORT_TO_ACCESS_SPEEDS m WHERE a.CHAR_TYPE_ID =( SELECT DISTINCT CHAR_TYPE_ID FROM CSU_REF_CHAR_TYPE WHERE UPPER(TRIM(CHAR_TYPE_NAME)) = '" + C_ACCESS_SPEED_DOWN_UP + "') AND a.CHAR_ID = b.access_speed_char_id AND b.port_speed_char_id = " + Char_id + " AND c.CHAR_TYPE_ID = " + C_ACCESS_TYPE + " AND c.CHAR_ID = m.access_type_char_id AND m.port_speed_char_id=b.port_speed_char_id AND m.access_speed_char_id = a.CHAR_ID ORDER BY a.CHAR_NUM_VALUE,a.CHAR_NUM_VALUE_2";//AND b.port_speed_char_id = 1
            }
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));


         
            return dsresult;
        }

        public DataSet GetPortSpeeds(int C_PORT_SPEED, string C_HVPN_PORT_SPEED, string C_ACCESS_SPEED_DOWN_UP)
        {
            DataSet dsresult = new DataSet();
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();
            string str = @"select distinct CHAR_ID, CHAR_NAME, CHAR_TYPE_ID, CHAR_DESC, CHAR_UNIT_OF_MEASURE, CREATED_EMP_ID, CREATED_DT, UPDATED_EMP_ID, UPDATED_DT, CHAR_ACTUAL_VALUE, CHAR_UPPER_RANGE, CHAR_LOWER_RANGE, CHAR_VALID_CD, CHAR_NUM_VALUE, CHAR_ACTUAL_VALUE_2, CHAR_UNIT_OF_MEASURE_2, CHAR_NUM_VALUE_2 FROM CSU_REF_VALID_CHAR WHERE CHAR_TYPE_ID = " + C_PORT_SPEED + " ORDER BY CHAR_NUM_VALUE";//and char_id in (1,162232,2,162230,162245,29561,4,162243,162236,162242,6,162241,162225,162235,162233,3561,172961,172962,162238,162231,162227,24,3170,5501,30,31,9701,5001,162228,162239,762,172963,763)
            OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

            ////HVPN Portspeeds
            str = string.Empty;
            str = @"Select distinct a.CHAR_ID,a.CHAR_NAME, a.CHAR_TYPE_ID, a.CHAR_DESC, a.CHAR_UNIT_OF_MEASURE, a.CREATED_EMP_ID, a.CREATED_DT, a.UPDATED_EMP_ID, a.UPDATED_DT, a.CHAR_ACTUAL_VALUE, a.CHAR_UPPER_RANGE, a.CHAR_LOWER_RANGE, a.CHAR_VALID_CD, a.CHAR_NUM_VALUE, a.CHAR_ACTUAL_VALUE_2, a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE_2 FROM CSU_REF_VALID_CHAR a Where  a.CHAR_TYPE_ID = ( SELECT DISTINCT CHAR_TYPE_ID FROM CSU_REF_CHAR_TYPE WHERE UPPER(TRIM(CHAR_TYPE_NAME)) = '" + (C_HVPN_PORT_SPEED) + "') ORDER BY CHAR_NUM_VALUE ASC";//AND b.port_speed_char_id = 1
            cmd = new OracleCommand(str.ToString(), oConn);
            dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

            ////mapped records
            str = string.Empty;
            str = @"select CHAR_TYPE_ID,UPPER(TRIM(CHAR_TYPE_NAME))  as CHAR_TYPE_NAME from CSU_REF_CHAR_TYPE where UPPER(TRIM(CHAR_TYPE_NAME)) in ('" + C_HVPN_PORT_SPEED + "','" + C_ACCESS_SPEED_DOWN_UP + "')";
            cmd = new OracleCommand(str.ToString(), oConn);
            dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));
          

            return dsresult;
        }
        public DataSet GetMappedAccessTypeChars(int portCharID, int accessCharID, int C_ACCESS_TYPE)
        {
            DataSet ds = new DataSet();
            strQuery.Clear();
            strQuery.Append("Select distinct c.CHAR_ID,c.CHAR_NAME,c.CHAR_TYPE_ID,c.CHAR_ACTUAL_VALUE,c.CHAR_UNIT_OF_MEASURE,c.CHAR_ACTUAL_VALUE_2,c.CHAR_UNIT_OF_MEASURE_2, c.CHAR_NUM_VALUE FROM CSU_REF_VALID_CHAR c, PORT_TO_ACCESS_SPEEDS m WHERE CHAR_TYPE_ID = " + C_ACCESS_TYPE + " AND c.CHAR_ID = m.access_type_char_id AND m.port_speed_char_id = " + portCharID + " AND m.access_speed_char_id = " + accessCharID + " ORDER BY CHAR_NUM_VALUE  ");

            OracleCommand cmd = new OracleCommand(strQuery.ToString(), oConn);
            dad = new OracleDataAdapter(cmd);
            ds = new DataSet();
            dad.Fill(ds);
            return ds;
        }

        public DataSet GetUnMappedAccessTypeChars(int portCharID, int accessCharID, int C_ACCESS_SPEED)
        {
            DataSet ds = new DataSet();
            strQuery.Clear();
            strQuery.Append("select distinct CHAR_ID, CHAR_NAME, CHAR_TYPE_ID, CHAR_DESC, CHAR_UNIT_OF_MEASURE, CREATED_EMP_ID, CREATED_DT, UPDATED_EMP_ID, UPDATED_DT, CHAR_ACTUAL_VALUE, CHAR_UPPER_RANGE, CHAR_LOWER_RANGE, CHAR_VALID_CD, CHAR_NUM_VALUE, CHAR_ACTUAL_VALUE_2, CHAR_UNIT_OF_MEASURE_2, CHAR_NUM_VALUE_2 FROM CSU_REF_VALID_CHAR  WHERE CHAR_TYPE_ID = " + C_ACCESS_SPEED + " ORDER BY CHAR_NUM_VALUE");

            OracleCommand cmd = new OracleCommand(strQuery.ToString(), oConn);
            dad = new OracleDataAdapter(cmd);
            ds = new DataSet();
            dad.Fill(ds);
            return ds;
        }
        public DataSet GetMappedHVPNAccessChars(int portCharID, string C_ACCESS_SPEED_DOWN_UP)
        {
            DataSet ds = new DataSet();
            strQuery.Clear();
            strQuery.Append("Select distinct a.CHAR_ID, a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE, A.CHAR_NUM_VALUE_2  FROM CSU_REF_VALID_CHAR a, PORT_TO_ACCESS_SPEEDS b  WHERE CHAR_TYPE_ID = ( SELECT DISTINCT CHAR_TYPE_ID FROM CSU_REF_CHAR_TYPE WHERE UPPER(TRIM(CHAR_TYPE_NAME)) = '" + C_ACCESS_SPEED_DOWN_UP + "') AND a.CHAR_ID = b.access_speed_char_id AND b.port_speed_char_id = " + portCharID + " ORDER BY CHAR_NUM_VALUE,CHAR_NUM_VALUE_2");

            OracleCommand cmd = new OracleCommand(strQuery.ToString(), oConn);
            dad = new OracleDataAdapter(cmd);
            ds = new DataSet();
            dad.Fill(ds);
            return ds;
        }

        public DataSet LoadPortAccessSpeedForEdit(int Char_id, int C_ACCESS_SPEED, string C_ACCESS_SPEED_DOWN_UP, string type, int C_ACCESS_TYPE, int StartRowNumMap, int EndRowNumMap, int StartRowNumUnMap, int EndRowNumUnMap, int TotalMapcount, int TotalUnMapcount)
        {
            DataSet dsresult = new DataSet();
            GetDataFromDB objGetDataFromDB = new GetDataFromDB();
            //string str = @"select distinct CHAR_ID, CHAR_NAME, CHAR_TYPE_ID, CHAR_DESC, CHAR_UNIT_OF_MEASURE, CREATED_EMP_ID, CREATED_DT, UPDATED_EMP_ID, UPDATED_DT, CHAR_ACTUAL_VALUE, CHAR_UPPER_RANGE, CHAR_LOWER_RANGE, CHAR_VALID_CD, CHAR_NUM_VALUE, CHAR_ACTUAL_VALUE_2, CHAR_UNIT_OF_MEASURE_2, CHAR_NUM_VALUE_2 FROM CSU_REF_VALID_CHAR WHERE CHAR_TYPE_ID = " + C_PORT_SPEED + "  and char_id =" + Char_id + "  ORDER BY CHAR_NUM_VALUE";//and char_id in (1,162232,2,162230,162245,29561,4,162243,162236,162242,6,162241,162225,162235,162233,3561,172961,172962,162238,162231,162227,24,3170,5501,30,31,9701,5001,162228,162239,762,172963,763)
            // OracleCommand cmd = new OracleCommand(str.ToString(), oConn);
            //dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));
            
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            DataTable dt3 = new DataTable();
            DataTable dt4 = new DataTable();
            ////mapped records
            StringBuilder str = new StringBuilder();
            OracleCommand cmd;
            if (type == "NORMAL")
            {
                if (TotalMapcount == -1 || TotalMapcount >= EndRowNumMap)
                {
                    StartRowNumMap = StartRowNumMap + 1;
                    //Mapped Port speeds
                    // str = @"Select distinct a.CHAR_ID,a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE,b.PORT_SPEED_CHAR_ID FROM CSU_REF_VALID_CHAR a, PORT_TO_ACCESS_SPEEDS b WHERE CHAR_TYPE_ID = " + C_ACCESS_SPEED + " AND a.CHAR_ID = b.access_speed_char_id  AND b.port_speed_char_id =" + Char_id + " AND ROWNUM BETWEEN 0 AND 100 ORDER BY CHAR_NUM_VALUE";//AND b.port_speed_char_id = 1
                    str.Append("SELECT  * FROM    (");
                    str.Append("SELECT  q.*, rownum rn  FROM    (");
                    str.Append("SELECT DISTINCT   a.CHAR_ID,a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE, a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2,a.CHAR_NUM_VALUE, b.PORT_SPEED_CHAR_ID,c.CHAR_ID as CHAR_ID_Map,c.CHAR_NAME as CHAR_NAME_Map, c.CHAR_TYPE_ID as CHAR_TYPE_ID_Map, c.CHAR_ACTUAL_VALUE as CHAR_ACTUAL_VALUE_Map, c.CHAR_UNIT_OF_MEASURE as CHAR_UNIT_OF_MEASURE_Map, c.CHAR_ACTUAL_VALUE_2 as CHAR_ACTUAL_VALUE_2_Map, c.CHAR_UNIT_OF_MEASURE_2 as CHAR_UNIT_OF_MEASURE_2_Map, c.CHAR_NUM_VALUE  as CHAR_NUM_VALUE_Map FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b,  CSU_REF_VALID_CHAR c,PORT_TO_ACCESS_SPEEDS m   WHERE a.CHAR_TYPE_ID =  " + C_ACCESS_SPEED + " AND a.CHAR_ID = b.access_speed_char_id AND b.port_speed_char_id =" + Char_id + " AND m.port_speed_char_id   = b.port_speed_char_id AND c.CHAR_ID = m.access_type_char_id AND m.access_speed_char_id = a.CHAR_ID AND c.CHAR_TYPE_ID = " + C_ACCESS_TYPE + "   AND m.access_speed_char_id = b.access_speed_char_id");
                    str.Append(") q");
                    str.Append(") WHERE  rn BETWEEN " + StartRowNumMap + " AND " + EndRowNumMap + "");

                    cmd = new OracleCommand(str.ToString(), oConn);
                    dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

                    //total Map
                    str.Clear();
                    str.Append("select count(*) from (");
                    str.Append(" SELECT DISTINCT   a.CHAR_ID,a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE, a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2,a.CHAR_NUM_VALUE, b.PORT_SPEED_CHAR_ID,c.CHAR_ID as CHAR_ID_Map,c.CHAR_NAME as CHAR_NAME_Map, c.CHAR_TYPE_ID as CHAR_TYPE_ID_Map, c.CHAR_ACTUAL_VALUE as CHAR_ACTUAL_VALUE_Map, c.CHAR_UNIT_OF_MEASURE as CHAR_UNIT_OF_MEASURE_Map, c.CHAR_ACTUAL_VALUE_2 as CHAR_ACTUAL_VALUE_2_Map, c.CHAR_UNIT_OF_MEASURE_2 as CHAR_UNIT_OF_MEASURE_2_Map, c.CHAR_NUM_VALUE  as CHAR_NUM_VALUE_Map FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b,  CSU_REF_VALID_CHAR c,PORT_TO_ACCESS_SPEEDS m   WHERE a.CHAR_TYPE_ID =  " + C_ACCESS_SPEED + " AND a.CHAR_ID = b.access_speed_char_id AND b.port_speed_char_id =" + Char_id + " AND m.port_speed_char_id   = b.port_speed_char_id AND c.CHAR_ID = m.access_type_char_id AND m.access_speed_char_id = a.CHAR_ID AND c.CHAR_TYPE_ID = " + C_ACCESS_TYPE + "   AND m.access_speed_char_id = b.access_speed_char_id");
                    str.Append(" )q");
                    cmd = new OracleCommand(str.ToString(), oConn);
                    dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

                }
                else {
                    dsresult.Tables.Add(dt1);
                    dsresult.Tables.Add(dt2);
                }

                //UnMapped Port speeds
                str.Clear();

                if (TotalUnMapcount == -1 || TotalUnMapcount >= EndRowNumUnMap)
                {
                    StartRowNumUnMap = StartRowNumUnMap + 1;
                    str.Append("SELECT  * FROM    (");
                    str.Append(" SELECT  q.*, rownum rn  FROM    (");
                    str.Append(" SELECT DISTINCT FT.CHAR_ID,FT.CHAR_NAME,FT.CHAR_TYPE_ID,FT.CHAR_DESC,FT.CHAR_UNIT_OF_MEASURE,FT.CREATED_EMP_ID,FT.CREATED_DT,FT.UPDATED_EMP_ID,FT.UPDATED_DT,FT.CHAR_ACTUAL_VALUE,FT.CHAR_UPPER_RANGE,FT.CHAR_LOWER_RANGE,FT.CHAR_VALID_CD,FT.CHAR_NUM_VALUE,FT.CHAR_ACTUAL_VALUE_2,FT.CHAR_UNIT_OF_MEASURE_2,FT.CHAR_NUM_VALUE_2,ST.CHAR_ID as CHAR_ID_Map,ST.CHAR_NAME as CHAR_NAME_Map,ST.CHAR_TYPE_ID as CHAR_TYPE_ID_Map,ST.CHAR_DESC as CHAR_DESC_Map, ST.CHAR_UNIT_OF_MEASURE as  CHAR_UNIT_OF_MEASURE_Map,ST.CREATED_EMP_ID as CREATED_EMP_ID_Map,ST.CREATED_DT as CREATED_DT_Map,ST.UPDATED_EMP_ID as UPDATED_EMP_ID_Map,ST.UPDATED_DT as UPDATED_DT_Map,ST.CHAR_ACTUAL_VALUE as CHAR_ACTUAL_VALUE_Map,ST.CHAR_UPPER_RANGE as CHAR_UPPER_RANGE_Map,ST.CHAR_LOWER_RANGE as CHAR_LOWER_RANGE_Map,ST.CHAR_VALID_CD as CHAR_VALID_CD_Map,ST.CHAR_NUM_VALUE as CHAR_NUM_VALUE_Map,ST.CHAR_ACTUAL_VALUE_2 as CHAR_ACTUAL_VALUE_2_Map,ST.CHAR_UNIT_OF_MEASURE_2 as CHAR_UNIT_OF_MEASURE_2_Map,ST.CHAR_NUM_VALUE_2  as CHAR_NUM_VALUE_2_Map");//AND b.port_speed_char_id = 1
                    str.Append(" FROM CSU_REF_VALID_CHAR ST,CSU_REF_VALID_CHAR FT");//AND b.port_speed_char_id = 1
                    str.Append(" WHERE ST.CHAR_TYPE_ID = " + C_ACCESS_TYPE + "  AND FT.CHAR_TYPE_ID = " + C_ACCESS_SPEED + " AND ST.CHAR_ID NOT IN (");
                    str.Append(" SELECT DISTINCT c.CHAR_ID FROM CSU_REF_VALID_CHAR c,PORT_TO_ACCESS_SPEEDS m,CSU_REF_VALID_CHAR F");
                    str.Append(" WHERE C.CHAR_TYPE_ID  = " + C_ACCESS_TYPE + " AND c.CHAR_ID = m.access_type_char_id AND m.port_speed_char_id   = " + Char_id + "");
                    str.Append(" AND m.access_speed_char_id = F.CHAR_ID AND F.CHAR_TYPE_ID = " + C_ACCESS_SPEED + " AND FT.CHAR_ID= m.access_speed_char_id and F.CHAR_ID=FT.CHAR_ID");
                    str.Append(" )ORDER BY FT.CHAR_NUM_VALUE");
                    str.Append(" ) q");
                    str.Append(" ) WHERE  rn BETWEEN " + StartRowNumUnMap  + " AND " + EndRowNumUnMap + "");
                    cmd = new OracleCommand(str.ToString(), oConn);
                    dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

                    //total UnMap
                    str.Clear();
                    str.Append("SELECT  count(*) from (");
                    str.Append(" SELECT DISTINCT FT.CHAR_ID,FT.CHAR_NAME,FT.CHAR_TYPE_ID,FT.CHAR_DESC,FT.CHAR_UNIT_OF_MEASURE,FT.CREATED_EMP_ID,FT.CREATED_DT,FT.UPDATED_EMP_ID,FT.UPDATED_DT,FT.CHAR_ACTUAL_VALUE,FT.CHAR_UPPER_RANGE,FT.CHAR_LOWER_RANGE,FT.CHAR_VALID_CD,FT.CHAR_NUM_VALUE,FT.CHAR_ACTUAL_VALUE_2,FT.CHAR_UNIT_OF_MEASURE_2,FT.CHAR_NUM_VALUE_2,ST.CHAR_ID as CHAR_ID_Map,ST.CHAR_NAME as CHAR_NAME_Map,ST.CHAR_TYPE_ID as CHAR_TYPE_ID_Map,ST.CHAR_DESC as CHAR_DESC_Map, ST.CHAR_UNIT_OF_MEASURE as  CHAR_UNIT_OF_MEASURE_Map,ST.CREATED_EMP_ID as CREATED_EMP_ID_Map,ST.CREATED_DT as CREATED_DT_Map,ST.UPDATED_EMP_ID as UPDATED_EMP_ID_Map,ST.UPDATED_DT as UPDATED_DT_Map,ST.CHAR_ACTUAL_VALUE as CHAR_ACTUAL_VALUE_Map,ST.CHAR_UPPER_RANGE as CHAR_UPPER_RANGE_Map,ST.CHAR_LOWER_RANGE as CHAR_LOWER_RANGE_Map,ST.CHAR_VALID_CD as CHAR_VALID_CD_Map,ST.CHAR_NUM_VALUE as CHAR_NUM_VALUE_Map,ST.CHAR_ACTUAL_VALUE_2 as CHAR_ACTUAL_VALUE_2_Map,ST.CHAR_UNIT_OF_MEASURE_2 as CHAR_UNIT_OF_MEASURE_2_Map,ST.CHAR_NUM_VALUE_2  as CHAR_NUM_VALUE_2_Map");//AND b.port_speed_char_id = 1
                    str.Append(" FROM CSU_REF_VALID_CHAR ST,CSU_REF_VALID_CHAR FT");//AND b.port_speed_char_id = 1
                    str.Append(" WHERE ST.CHAR_TYPE_ID = " + C_ACCESS_TYPE + "  AND FT.CHAR_TYPE_ID = " + C_ACCESS_SPEED + " AND ST.CHAR_ID NOT IN (");
                    str.Append(" SELECT DISTINCT c.CHAR_ID FROM CSU_REF_VALID_CHAR c,PORT_TO_ACCESS_SPEEDS m,CSU_REF_VALID_CHAR F");
                    str.Append(" WHERE C.CHAR_TYPE_ID  = " + C_ACCESS_TYPE + " AND c.CHAR_ID = m.access_type_char_id AND m.port_speed_char_id   = " + Char_id + "");
                    str.Append(" AND m.access_speed_char_id = F.CHAR_ID AND F.CHAR_TYPE_ID = " + C_ACCESS_SPEED + " AND FT.CHAR_ID= m.access_speed_char_id and F.CHAR_ID=FT.CHAR_ID");
                    str.Append(" )ORDER BY FT.CHAR_NUM_VALUE");
                    str.Append(" )q");
                    cmd = new OracleCommand(str.ToString(), oConn);
                    dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));
                }
                else {
                    dsresult.Tables.Add(dt3);
                    dsresult.Tables.Add(dt4);
                }

               

                
            }
            else
            { //Mapped Port speeds
                str.Clear();
                str.Append("SELECT  * FROM    (");
                str.Append("SELECT  q.*, rownum rn  FROM    (");
                str.Append("Select distinct a.CHAR_ID, a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE,a.CHAR_NUM_VALUE_2,b.PORT_SPEED_CHAR_ID FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b  WHERE CHAR_TYPE_ID = ( SELECT DISTINCT CHAR_TYPE_ID FROM CSU_REF_CHAR_TYPE WHERE UPPER(TRIM(CHAR_TYPE_NAME)) = '" + C_ACCESS_SPEED_DOWN_UP + "')  AND a.CHAR_ID = b.access_speed_char_id  AND b.port_speed_char_id = " + Char_id + " AND ROWNUM BETWEEN 0 AND 100 ORDER BY CHAR_NUM_VALUE,CHAR_NUM_VALUE_2");//AND b.port_speed_char_id = 1
                str.Append(") q");
                str.Append(") WHERE  rn BETWEEN 0 AND 100");
                cmd = new OracleCommand(str.ToString(), oConn);
                dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));

                //UnMapped Port speeds  For HVPN
                str.Clear();
                str.Append("SELECT  * FROM    (");
                str.Append("SELECT  q.*, rownum rn  FROM    (");
                 str.Append("Select distinct a.CHAR_ID, a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE,a.CHAR_NUM_VALUE_2,b.PORT_SPEED_CHAR_ID FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b  WHERE CHAR_TYPE_ID = ( SELECT DISTINCT CHAR_TYPE_ID FROM CSU_REF_CHAR_TYPE WHERE UPPER(TRIM(CHAR_TYPE_NAME)) = '" + C_ACCESS_SPEED_DOWN_UP + "')  AND a.CHAR_ID = b.access_speed_char_id  AND b.port_speed_char_id = " + Char_id + " AND a.CHAR_ID  in (Select distinct a.CHAR_ID, a.CHAR_NAME,a.CHAR_TYPE_ID,a.CHAR_ACTUAL_VALUE,a.CHAR_UNIT_OF_MEASURE,a.CHAR_ACTUAL_VALUE_2,a.CHAR_UNIT_OF_MEASURE_2, a.CHAR_NUM_VALUE,a.CHAR_NUM_VALUE_2,b.PORT_SPEED_CHAR_ID FROM CSU_REF_VALID_CHAR a,PORT_TO_ACCESS_SPEEDS b  WHERE CHAR_TYPE_ID = ( SELECT DISTINCT CHAR_TYPE_ID FROM CSU_REF_CHAR_TYPE WHERE UPPER(TRIM(CHAR_TYPE_NAME)) = '" + C_ACCESS_SPEED_DOWN_UP + "')  AND a.CHAR_ID = b.access_speed_char_id  AND b.port_speed_char_id = " + Char_id + ")  AND ROWNUM BETWEEN 0 AND 100 ORDER BY CHAR_NUM_VALUE,CHAR_NUM_VALUE_2");//AND b.port_speed_char_id = 1
                str.Append(") q");
                str.Append(") WHERE  rn BETWEEN 0 AND 100");
                cmd = new OracleCommand(str.ToString(), oConn);
                dsresult.Tables.Add(objGetDataFromDB.GetDataTable(str.ToString()));
            }
          



            return dsresult;
        }

        public int InsertPortToAccessSpeedMapping(int pPortId,string charIDs,string userID)
        {
            OracleConnection connection = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
            int result=0;
            OracleCommand cmdOra;
            //int reportColumnCd = GetReportColumnCdData(reportId, orderCd);
            try
            {

                connection.Open();
                string[] pNewMap=charIDs.ToString().Split(',');
                foreach(var mapid  in pNewMap)
                {
                  
                    strQuery.Clear();
                    string[] strArrayCharids = mapid.ToString().Split('-');

                    strQuery.Append("INSERT INTO port_to_access_speeds (port_speed_char_id, access_speed_char_id, ACCESS_TYPE_CHAR_ID,  created_emp_id, created_dt, updated_emp_id, updated_dt) values(" + pPortId + ", " + Convert.ToInt32(strArrayCharids[1]) + ", " + Convert.ToInt32(strArrayCharids[2]) + ",  '" + userID + "', sysdate, '" + userID + "', sysdate)");
                    cmdOra = new OracleCommand(strQuery.ToString(), connection);
                    cmdOra.CommandType = CommandType.Text;
                    result = cmdOra.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                connection.Close();
            }
            finally
            {
                connection.Close();
                connection.Dispose();
            }
            return result;
        }

        private int CleanPortSpeedInterface(int pPortSpeedCharId, int pAccessSpeedCharId,int accessCharTypeID, string userID)
        {
            OracleConnection connection = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
            OracleCommand cmdOra;
            int result = 0;
            //int reportColumnCd = GetReportColumnCdData(reportId, orderCd);
            try
            {

                //CleanCasePortAccessSpeed
                connection.Open();
                strQuery.Clear();
               /* strQuery.Append("delete from csu_case_port_access_speeds   where port_speed_char_id = " + pPortSpeedCharId + " and access_speed_char_id = " + pAccessSpeedCharId + "  and ACCESS_TYPE_CHAR_ID");
                cmdOra = new OracleCommand(strQuery.ToString(), connection);
                cmdOra.CommandType = CommandType.Text;
                result = cmdOra.ExecuteNonQuery();


                //CleanParentPortAccessSpeed
                strQuery.Clear();
                strQuery.Append("delete from csu_parent_port_access_speeds where port_speed_char_id = " + pPortSpeedCharId + " and access_speed_char_id = " + pAccessSpeedCharId + " and ACCESS_TYPE_CHAR_ID");
                cmdOra = new OracleCommand(strQuery.ToString(), connection);
                cmdOra.CommandType = CommandType.Text;
                result = cmdOra.ExecuteNonQuery();

                strQuery.Clear();
                */
                strQuery.Append("DELETE FROM port_to_access_speeds WHERE   port_speed_char_id = " + pPortSpeedCharId + " and access_speed_char_id = " + pAccessSpeedCharId+" and ACCESS_TYPE_CHAR_ID ="+accessCharTypeID);
                cmdOra = new OracleCommand(strQuery.ToString(), connection);
                cmdOra.CommandType = CommandType.Text;
                result = cmdOra.ExecuteNonQuery();
               
            }
            catch (Exception ex)
            {
                connection.Close();
            }
            finally
            {
                connection.Close();
                connection.Dispose();
            }
            return result;
        }

        public int DeletePortToAccessSpeedMapping(int pPortId, string charIDs, string userID)
        {
            OracleConnection connection = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
            int result = 0;
            //int reportColumnCd = GetReportColumnCdData(reportId, orderCd);
            try
            {

                strQuery.Clear();
                string[] pNewMap = charIDs.ToString().Split(',');
                foreach (var mapid in pNewMap)
                {
                    string[] strArrayCharids = mapid.ToString().Split('-');
                    result = CleanPortSpeedInterface(pPortId, Convert.ToInt32(strArrayCharids[1]),Convert.ToInt32(strArrayCharids[2]), userID);
                }

            }
            catch (Exception ex)
            {
                connection.Close();
            }
            finally
            {
                connection.Close();
                connection.Dispose();
            }
            return result;
        }

        #endregion
        #region Notes

        public DataTable GetProducts(int curr_state, int userId, int accessLevel, string sLdapGFR, int sBtGfrCodes, int sSegregationCodes, int sMPLSCapOnlyPO)
        {
            strQuery.Clear();
            if (curr_state == 100 || curr_state == 101)
            {
                strQuery.Append("Select distinct b.Service_Type_Desc, a.Product_cd, a.product_name, ");
                strQuery.Append(" Product_Loc_Level_cd from CSU_PRODUCT a,");
                strQuery.Append(" CSU_REF_SERVICE_TYPE b");
                //if (accessLevel != 1)
                //{
                //    if (accessLevel != 2)
                //    {
                //        if (sLdapGFR != "")
                //        {
                //            strQuery.Append(" , csu_btgfr_product_map cbp, csu_segregation_vw v ");
                //        }
                //        else
                //        {
                //            strQuery.Append(" , csu_segregation cs, csu_segregation_vw v ");
                //        }
                //    }
                //}
                strQuery.Append(" where a.Product_valid_cd = 1 ");
                strQuery.Append(" and a.Product_cd <> 16 ");
                strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd ");
                if (accessLevel != 1)
                {
                    if (accessLevel == 2)
                    {
                        strQuery.Append(" and a.Product_cd in (Select product_cd from csu_user_product_owner where emp_id='" + userId + "') ");
                        strQuery.Append(" union");
                        if (sLdapGFR != "")
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b, csu_btgfr_product_map cbp, csu_segregation_vw v ");
                            strQuery.Append(" where a.Product_valid_cd = 1");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd ");
                            //strQuery.Append(" and cbp.product_cd = a.product_cd and ");
                            //strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + " ) and ");
                            //strQuery.Append(" v.id = cbp.btgfr");
                        }
                        else
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b");
                            strQuery.Append(" where a.Product_valid_cd = 1");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd");
                            //strQuery.Append(" and cs.product_cd = a.product_cd and");
                            //strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and");
                            //strQuery.Append(" v.id = cs.segregation_id");
                        }
                        //strQuery.Append(" order by Service_Type_Desc,product_name");

                        //if (sLdapGFR != "")
                        //{
                        //    strQuery.Append(" and cbp.product_cd = a.product_cd and ");
                        //    strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + ") and ");
                        //    strQuery.Append(" v.id = cbp.btgfr");
                        //}
                        //else
                        //{
                        //    strQuery.Append(" and cs.product_cd = a.product_cd and ");
                        //    strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and  ");
                        //    strQuery.Append(" v.id = cs.segregation_id ");
                        //}

                    }
                }
                if (accessLevel != 2)
                {
                    strQuery.Append(" ORDER BY b.Service_type_desc, UPPER(a.Product_name)");
                }
            }
            else if (curr_state == 103 || curr_state == 108)
            {
                strQuery.Append(" Select distinct b.Service_Type_Desc, a.Product_cd, a.product_name, ");
                strQuery.Append(" Product_Loc_Level_cd from CSU_PRODUCT a, ");
                strQuery.Append(" CSU_REF_SERVICE_TYPE b");
                //if (accessLevel != 1)
                //{
                //    if (accessLevel != 2)
                //    {
                //        if (sLdapGFR != "")
                //        {
                //            strQuery.Append(" , csu_btgfr_product_map cbp, csu_segregation_vw v ");
                //        }
                //        else
                //        {
                //            strQuery.Append(" , csu_segregation cs, csu_segregation_vw v ");
                //        }

                //    }
                //}
                strQuery.Append(" where a.Product_valid_cd = 1");
                strQuery.Append("  and a.Service_type_cd = b.Service_Type_cd");

                if (accessLevel != 1)
                {
                    if (accessLevel == 2)
                    {
                        strQuery.Append(" and a.Product_cd in (Select product_cd from csu_user_product_owner where emp_id='" + userId + "' )");
                        strQuery.Append(" union");
                        if (sLdapGFR != "")
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b, csu_btgfr_product_map cbp, csu_segregation_vw v ");
                            strQuery.Append(" where a.Product_valid_cd =1 ");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd");
                            //strQuery.Append(" and cbp.product_cd = a.product_cd and");
                            //strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + ") and ");
                            //strQuery.Append(" v.id = cbp.btgfr");
                        }
                        else
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b ");
                            strQuery.Append(" where a.Product_valid_cd = 1 ");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd");
                            //strQuery.Append(" and cs.product_cd = a.product_cd and ");
                            //strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and");
                            //strQuery.Append(" v.id = cs.segregation_id");
                        }
                        //strQuery.Append("order by Service_Type_Desc,product_name");

                        //if (sLdapGFR != "")
                        //{
                        //    strQuery.Append(" and cbp.product_cd = a.product_cd and ");
                        //    if (curr_state == 103 && (accessLevel != 2 || sMPLSCapOnlyPO == 0))
                        //    {
                        //        strQuery.Append(" a.product_cd <> 21 and ");
                        //    }
                        //    strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + ") and ");
                        //    strQuery.Append(" v.id = cbp.btgfr ");
                        //}
                        //else
                        //{
                        //    strQuery.Append(" and cs.product_cd = a.product_cd and ");
                        //    if (curr_state == 103 && (accessLevel != 2 || sMPLSCapOnlyPO == 0))
                        //    {
                        //        strQuery.Append(" a.product_cd <> 21 and ");
                        //    }
                        //    strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and");
                        //    strQuery.Append(" v.id = cs.segregation_id ");
                        //}
                    }

                }
                if (accessLevel == 3)
                {
                    strQuery.Append(" and a.Product_cd in (Select product_cd from product_launch where launch_flag=1)");
                }
                if (accessLevel != 2)
                {
                    strQuery.Append(" ORDER BY b.Service_type_desc, UPPER(a.Product_name)");
                }
            }
            else if (curr_state == 107)
            {
                strQuery.Append(" Select distinct b.Service_Type_Desc, a.Product_cd, a.product_name, ");
                strQuery.Append(" Product_Loc_Level_cd from CSU_PRODUCT a, ");
                strQuery.Append(" CSU_REF_SERVICE_TYPE b ");
                //if (accessLevel != 1)
                //{
                //    if (accessLevel != 2)
                //    {
                //        if (sLdapGFR != "")
                //        {
                //            strQuery.Append(" , csu_btgfr_product_map cbp, csu_segregation_vw v ");
                //        }
                //        else
                //        {
                //            strQuery.Append(" , csu_segregation cs, csu_segregation_vw v ");
                //        }
                //    }
                //}

                strQuery.Append(" where a.Product_valid_cd = 1");
                strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd ");

                if (accessLevel != 1)
                {
                    if (accessLevel == 2)
                    {
                        strQuery.Append(" and a.Product_cd in (Select product_cd from csu_user_product_owner where emp_id='" + userId + "' )");
                        strQuery.Append(" union ");
                        if (sLdapGFR != "")
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b, csu_btgfr_product_map cbp, csu_segregation_vw v ");
                            strQuery.Append(" where a.Product_valid_cd =1 ");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd");
                            //strQuery.Append(" and cbp.product_cd = a.product_cd and");
                            //strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + ") and ");
                            //strQuery.Append(" v.id = cbp.btgfr");
                        }
                        else
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b ");
                            strQuery.Append(" where a.Product_valid_cd = 1 ");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd ");
                            //strQuery.Append(" and cs.product_cd = a.product_cd and ");
                            //strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and  ");
                            //strQuery.Append(" v.id = cs.segregation_id");
                        }
                        //strQuery.Append(" order by Service_Type_Desc,product_name");

                        //if (sLdapGFR != "")
                        //{
                        //    strQuery.Append(" and cbp.product_cd = a.product_cd and ");
                        //    strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + ") and  ");
                        //    strQuery.Append(" v.id = cbp.btgfr");
                        //}
                        //else
                        //{
                        //    strQuery.Append(" and cs.product_cd = a.product_cd and ");
                        //    strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and ");
                        //    strQuery.Append(" v.id = cs.segregation_id ");
                        //}
                    }
                }
                if (accessLevel != 2)
                {
                    strQuery.Append(" ORDER BY b.Service_type_desc, UPPER(a.Product_name)");
                }
            }

            else if (curr_state == 208)
            {
                if (accessLevel == 1)
                {
                    strQuery.Append(" Select b.Service_Type_Desc, a.Product_cd, a.product_name,");
                    strQuery.Append(" Product_Loc_Level_cd from CSU_PRODUCT a, ");
                    strQuery.Append(" CSU_REF_SERVICE_TYPE b WHERE");
                    strQuery.Append(" a.Service_type_cd = b.Service_Type_cd");
                    strQuery.Append(" ORDER BY b.Service_type_desc, UPPER(a.Product_name)");
                }
                else
                {
                    strQuery.Append(" Select b.Service_Type_Desc, a.Product_cd, a.product_name, ");
                    strQuery.Append(" Product_Loc_Level_cd from CSU_PRODUCT a,");
                    strQuery.Append(" CSU_REF_SERVICE_TYPE b, CSU_USER_PRODUCT_OWNER c WHERE ");
                    strQuery.Append(" Emp_id ='" + userId + "' ");
                    strQuery.Append(" AND c.Product_cd = a.Product_cd AND");
                    strQuery.Append(" c.Product_Owner_Status_cd = 1");
                    strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd ");
                    strQuery.Append(" ORDER BY b.Service_type_desc, UPPER(a.Product_name) ");
                }
                strQuery.Append(" Select distinct b.Service_Type_Desc, a.Product_cd, a.product_name,");
                strQuery.Append(" Product_Loc_Level_cd from CSU_PRODUCT a, ");
                strQuery.Append(" CSU_REF_SERVICE_TYPE b");

                //if (accessLevel != 1)
                //{
                //    if (accessLevel != 2)
                //    {
                //        if (sLdapGFR != "")
                //        {
                //            strQuery.Append(" , csu_btgfr_product_map cbp, csu_segregation_vw v ");
                //        }
                //        else
                //        {
                //            strQuery.Append(" , csu_segregation cs, csu_segregation_vw v");
                //        }
                //    }
                //}

                strQuery.Append(" where Product_valid_cd = 1");
                strQuery.Append(" and a.Product_cd <> 16");
                strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd");
                if (accessLevel != 1)
                {
                    if (accessLevel == 2)
                    {
                        strQuery.Append(" and a.Product_cd in (Select product_cd from csu_user_product_owner where emp_id='" + userId + "') ");
                        strQuery.Append(" union");
                        if (sLdapGFR != "")
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b, csu_btgfr_product_map cbp, csu_segregation_vw v ");
                            strQuery.Append(" where a.Product_valid_cd = 1 ");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd");
                            //strQuery.Append(" and cbp.product_cd = a.product_cd and ");
                            //strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + ") and ");
                            //strQuery.Append(" v.id = cbp.btgfr");
                        }
                        else
                        {
                            strQuery.Append(" select distinct b.Service_Type_Desc,a.product_cd,a.product_name,Product_Loc_Level_cd from csu_product a,CSU_REF_SERVICE_TYPE b ");
                            strQuery.Append(" where a.Product_valid_cd = 1");
                            strQuery.Append(" and a.Service_type_cd = b.Service_Type_cd");
                            //strQuery.Append(" and cs.product_cd = a.product_cd and");
                            //strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and ");
                            //strQuery.Append(" v.id = cs.segregation_id");
                        }
                        //strQuery.Append(" order by Service_Type_Desc,product_name");
                        //if (sLdapGFR != "")
                        //{
                        //    strQuery.Append(" and cbp.product_cd = a.product_cd and ");
                        //    strQuery.Append(" cbp.btgfr in (" + sBtGfrCodes + ") and");
                        //    strQuery.Append(" v.id = cbp.btgfr ");
                        //}
                        //else
                        //{
                        //    strQuery.Append(" and cs.product_cd = a.product_cd and");
                        //    strQuery.Append(" cs.segregation_id in (" + sSegregationCodes + ") and ");
                        //    strQuery.Append(" v.id = cs.segregation_id ");
                        //}
                    }
                }

                if (accessLevel != 2)
                {
                    strQuery.Append(" ORDER BY b.Service_type_desc, UPPER(a.Product_name)");
                }

            }

            return objGetDataFromDB.GetDataTable(strQuery.ToString());
        }

        public DataTable GetRegions(int productId)
        {
            strQuery.Clear();
            strQuery.Append("Select distinct Region.Region_Name, Region.Region_id from CSU_Region Region,");
            strQuery.Append(" CSU_Cases Cases, CSU_Ref_Availability Status Where");
            strQuery.Append(" Cases.Region_id = Region.Region_id");
            strQuery.Append(" and Cases.Case_Avail_cd = Status.Avail_Cd");
            strQuery.Append(" and Cases.Product_Cd =" + productId + " ");
            strQuery.Append(" order by region_name");
            return objGetDataFromDB.GetDataTable(strQuery.ToString());
        }

        public DataTable GetCountries(int productId)
        {
            strQuery.Clear();
            strQuery.Append("Select distinct Country.Country_Name, Country.Country_id from CSU_Country Country,");
            strQuery.Append(" CSU_Cases Cases, CSU_Ref_Availability Status Where");
            strQuery.Append(" Cases.Region_id = country.Region_id");
            strQuery.Append(" and Cases.Country_id = Country.Country_id");
            strQuery.Append(" and Cases.Case_Avail_cd = Status.Avail_Cd");
            strQuery.Append(" and Cases.Product_Cd =" + productId + " ");
            strQuery.Append(" order by country_name");
            return objGetDataFromDB.GetDataTable(strQuery.ToString());
        }

        public DataTable GetCities(int productId, int countryId)
        {
            //country_name - state_province_name - city_name
            strQuery.Clear();
            strQuery.Append("Select distinct Country.Country_Name, City.City_Name, City.City_id,state.state_province_name");
            strQuery.Append(" from CSU_City City, CSU_Cases Cases, CSU_Ref_Availability Status, CSU_Country Country,CSU_State_Province State");
            strQuery.Append(" Where Cases.City_id = City.city_id and Country.Country_id =City.country_id ");
            strQuery.Append(" and City.state_province_id = State.state_province_id(+)");
            strQuery.Append(" and Cases.Case_Avail_cd = Status.Avail_Cd");
            strQuery.Append(" and Cases.Product_Cd =" + productId + " ");
            strQuery.Append(" and Cases.Country_id =" + countryId + " ");
            strQuery.Append(" order by country_name,city_name");
            return objGetDataFromDB.GetDataTable(strQuery.ToString());
        }

        public DataTable GetNotesGridData(int Criteria, int productId, int regionId, int countryId, int cityId, int rowNum)
        {
            //strQuery.Clear();

            strQuery.Clear();
            if (Criteria == 1)
            {
                strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,CAST(NOTE_CONTENT AS VARCHAR2(3999)),UPDATED_DT,NOTE_TITLE,NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD  FROM (SELECT A.CREATED_DT,A.PRODUCT_CD, ROWNUM R, (SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY, ");
                strQuery.Append(" (select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy, A.NOTE_CONTENT, A.UPDATED_DT, A.NOTE_TITLE, A.NOTE_EFF_BEG_DATE, A.NOTE_EFF_END_DATE,");
                strQuery.Append(" B.NOTE_CATEGORY_DESC, B.NOTE_CATEGORY_CD, C.NOTE_PRIORITY_DESC, C.NOTE_PRIORITY_CD, NOTE_ID FROM CSU_NOTES A, CSU_REF_NOTES_CATEGORY B,");
                strQuery.Append(" CSU_Ref_Notes_Priority c WHERE ");
                strQuery.Append(" A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                strQuery.Append(" AND A.NOTE_PRIORITY_CD = C.NOTE_PRIORITY_CD");
                strQuery.Append(" and a.Region_id is Null ");
                strQuery.Append(" and a.Country_id is Null ");
                strQuery.Append(" and a.City_id is Null ");
                strQuery.Append(" and a.Product_Cd = " + productId + " order by A.CREATED_DT desc) where ");
                if (rowNum == 100)
                {
                    strQuery.Append(" rownum between 0 and 100)");
                }
                else
                {
                    strQuery.Append(" rownum between 0 and " + rowNum + " )");
                    strQuery.Append(" Minus");
                    strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,CAST(NOTE_CONTENT AS VARCHAR2(3999)),UPDATED_DT,NOTE_TITLE, ");
                    strQuery.Append(" NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD ");
                    strQuery.Append(" FROM(SELECT A.CREATED_DT,A.PRODUCT_CD,ROWNUM R,(SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY,(select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy,A.NOTE_CONTENT,A.UPDATED_DT,A.NOTE_TITLE,A.NOTE_EFF_BEG_DATE, ");
                    strQuery.Append(" A.NOTE_EFF_END_DATE,B.NOTE_CATEGORY_DESC,B.NOTE_CATEGORY_CD,C.NOTE_PRIORITY_DESC,C.NOTE_PRIORITY_CD,NOTE_ID FROM CSU_NOTES A, ");
                    strQuery.Append(" CSU_REF_NOTES_CATEGORY B,CSU_Ref_Notes_Priority c WHERE A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                    strQuery.Append(" AND A.NOTE_PRIORITY_CD   = C.NOTE_PRIORITY_CD AND a.Region_id IS NULL");
                    strQuery.Append(" AND a.Country_id IS NULL AND a.City_id IS NULL");
                    strQuery.Append(" AND A.PRODUCT_CD = " + productId + " ");
                    strQuery.Append(" ORDER BY A.CREATED_DT DESC )WHERE ROWNUM ");
                    strQuery.Append(" BETWEEN 0 AND  " + (rowNum - 100) + " )");
                    strQuery.Append(" Order by CREATED_DT Desc");
                }
            }
            else if (Criteria == 2)
            {
                strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,CAST(NOTE_CONTENT AS VARCHAR2(3999)),UPDATED_DT,NOTE_TITLE,NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD  FROM (SELECT A.CREATED_DT,A.PRODUCT_CD, ROWNUM R, (SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY, ");
                strQuery.Append(" (select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy, A.NOTE_CONTENT, A.UPDATED_DT, A.NOTE_TITLE, A.NOTE_EFF_BEG_DATE, A.NOTE_EFF_END_DATE,");
                strQuery.Append(" B.NOTE_CATEGORY_DESC,B.NOTE_CATEGORY_CD, C.NOTE_PRIORITY_DESC,C.NOTE_PRIORITY_CD, NOTE_ID FROM CSU_NOTES A, CSU_REF_NOTES_CATEGORY B,");
                strQuery.Append(" CSU_Ref_Notes_Priority c WHERE ");
                strQuery.Append(" A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                strQuery.Append(" AND A.NOTE_PRIORITY_CD = C.NOTE_PRIORITY_CD");
                strQuery.Append(" and a.Region_id =" + regionId + " ");
                strQuery.Append(" and a.Country_id is Null ");
                strQuery.Append(" and a.City_id is Null ");
                strQuery.Append(" and a.Product_Cd = " + productId + " order by A.CREATED_DT desc)WHERE");
                if (rowNum == 100)
                {
                    strQuery.Append(" rownum between 0 and 100)");
                }
                else
                {
                    strQuery.Append(" rownum between 0 and " + rowNum + " )");
                    strQuery.Append(" Minus");
                    strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,CAST(NOTE_CONTENT AS VARCHAR2(3999)),UPDATED_DT,NOTE_TITLE, ");
                    strQuery.Append(" NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD ");
                    strQuery.Append(" FROM(SELECT A.CREATED_DT,A.PRODUCT_CD,ROWNUM R,(SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY,(select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy,A.NOTE_CONTENT,A.UPDATED_DT,A.NOTE_TITLE,A.NOTE_EFF_BEG_DATE, ");
                    strQuery.Append(" A.NOTE_EFF_END_DATE,B.NOTE_CATEGORY_DESC,B.NOTE_CATEGORY_CD,C.NOTE_PRIORITY_DESC,C.NOTE_PRIORITY_CD,NOTE_ID FROM CSU_NOTES A, ");
                    strQuery.Append(" CSU_REF_NOTES_CATEGORY B,CSU_Ref_Notes_Priority c WHERE A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                    strQuery.Append(" AND A.NOTE_PRIORITY_CD   = C.NOTE_PRIORITY_CD AND a.Region_id IS NULL");
                    strQuery.Append(" AND a.Country_id IS NULL AND a.City_id IS NULL");
                    strQuery.Append(" AND A.PRODUCT_CD =" + productId + " ");
                    strQuery.Append(" ORDER BY A.CREATED_DT DESC )WHERE ROWNUM ");
                    strQuery.Append(" BETWEEN 0 AND  " + (rowNum - 100) + " )");
                    strQuery.Append(" Order by CREATED_DT Desc");
                }
            }
            else if (Criteria == 3)
            {
                strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,CAST(NOTE_CONTENT AS VARCHAR2(3999)),UPDATED_DT,NOTE_TITLE,NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD  FROM (SELECT A.CREATED_DT,A.PRODUCT_CD, ROWNUM R, (SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY, ");
                strQuery.Append(" (select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy, A.NOTE_CONTENT, A.UPDATED_DT, A.NOTE_TITLE, A.NOTE_EFF_BEG_DATE, A.NOTE_EFF_END_DATE,");
                strQuery.Append(" B.NOTE_CATEGORY_DESC,B.NOTE_CATEGORY_CD, C.NOTE_PRIORITY_DESC,C.NOTE_PRIORITY_CD, NOTE_ID FROM CSU_NOTES A, CSU_REF_NOTES_CATEGORY B,");
                strQuery.Append(" CSU_Ref_Notes_Priority c WHERE ");
                strQuery.Append(" A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                strQuery.Append(" AND A.NOTE_PRIORITY_CD = C.NOTE_PRIORITY_CD");
                strQuery.Append(" and Country_id = " + countryId + " ");
                strQuery.Append(" and a.City_id is Null ");
                strQuery.Append(" and a.Product_Cd = " + productId + " order by A.CREATED_DT desc)WHERE");
                if (rowNum == 100)
                {
                    strQuery.Append(" rownum between 0 and 100)");
                }
                else
                {
                    strQuery.Append(" rownum between 0 and " + rowNum + " )");
                    strQuery.Append(" Minus");
                    strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,CAST(NOTE_CONTENT AS VARCHAR2(3999)),UPDATED_DT,NOTE_TITLE, ");
                    strQuery.Append(" NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD ");
                    strQuery.Append(" FROM(SELECT A.CREATED_DT,A.PRODUCT_CD,ROWNUM R,(SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY,(select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy,A.NOTE_CONTENT,A.UPDATED_DT,A.NOTE_TITLE,A.NOTE_EFF_BEG_DATE, ");
                    strQuery.Append(" A.NOTE_EFF_END_DATE,B.NOTE_CATEGORY_DESC,B.NOTE_CATEGORY_CD,C.NOTE_PRIORITY_DESC,C.NOTE_PRIORITY_CD,NOTE_ID FROM CSU_NOTES A, ");
                    strQuery.Append(" CSU_REF_NOTES_CATEGORY B,CSU_Ref_Notes_Priority c WHERE A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                    strQuery.Append(" AND A.NOTE_PRIORITY_CD   = C.NOTE_PRIORITY_CD AND a.Region_id IS NULL");
                    strQuery.Append(" AND a.Country_id IS NULL AND a.City_id IS NULL");
                    strQuery.Append(" AND A.PRODUCT_CD = " + productId + " ");
                    strQuery.Append(" ORDER BY A.CREATED_DT DESC )WHERE ROWNUM ");
                    strQuery.Append(" BETWEEN 0 AND  " + (rowNum - 100) + " )");
                    strQuery.Append(" Order by CREATED_DT Desc");
                }
            }
            else if (Criteria == 4)
            {
                strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,CAST(NOTE_CONTENT AS VARCHAR2(3999)),UPDATED_DT,NOTE_TITLE,NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD  FROM (SELECT A.CREATED_DT,A.PRODUCT_CD, ROWNUM R, (SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY, ");
                strQuery.Append(" (select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy, A.NOTE_CONTENT, A.UPDATED_DT, A.NOTE_TITLE, A.NOTE_EFF_BEG_DATE, A.NOTE_EFF_END_DATE,");
                strQuery.Append(" B.NOTE_CATEGORY_DESC,B.NOTE_CATEGORY_CD, C.NOTE_PRIORITY_DESC,C.NOTE_PRIORITY_CD, NOTE_ID FROM CSU_NOTES A, CSU_REF_NOTES_CATEGORY B,");
                strQuery.Append(" CSU_Ref_Notes_Priority c WHERE ");
                strQuery.Append(" A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                strQuery.Append(" AND A.NOTE_PRIORITY_CD = C.NOTE_PRIORITY_CD");
                strQuery.Append(" and City_id = " + cityId + " ");
                strQuery.Append(" and a.Product_Cd = " + productId + " order by A.CREATED_DT desc)WHERE");
                if (rowNum == 100)
                {
                    strQuery.Append(" rownum between 0 and 100)");
                }
                else
                {
                    strQuery.Append(" rownum between 0 and " + rowNum + " )");
                    strQuery.Append(" Minus");
                    strQuery.Append("(SELECT CREATED_DT,NOTE_ID,PRODUCT_CD,ROWNUM,CREATEDBY,UPDATEDBY,UPDATED_DT,NOTE_TITLE, ");
                    strQuery.Append(" NOTE_EFF_BEG_DATE,NOTE_EFF_END_DATE,NOTE_CATEGORY_DESC,NOTE_CATEGORY_CD,NOTE_PRIORITY_DESC,NOTE_PRIORITY_CD ");
                    strQuery.Append(" FROM(SELECT A.CREATED_DT,A.PRODUCT_CD,ROWNUM R,(SELECT USER_NAME FROM CSU_USER WHERE EMP_ID = A.CREATED_EMP_ID)AS CREATEDBY,(select User_name from CSU_USER where EMP_Id =  A.UPDATED_EMP_ID)as UPDATEDBy,A.NOTE_CONTENT,A.UPDATED_DT,A.NOTE_TITLE,A.NOTE_EFF_BEG_DATE, ");
                    strQuery.Append(" A.NOTE_EFF_END_DATE,B.NOTE_CATEGORY_DESC,B.NOTE_CATEGORY_CD,C.NOTE_PRIORITY_DESC,C.NOTE_PRIORITY_CD,NOTE_ID FROM CSU_NOTES A, ");
                    strQuery.Append(" CSU_REF_NOTES_CATEGORY B,CSU_Ref_Notes_Priority c WHERE A.NOTE_CATEGORY_CD = B.NOTE_CATEGORY_CD");
                    strQuery.Append(" AND A.NOTE_PRIORITY_CD   = C.NOTE_PRIORITY_CD AND a.Region_id IS NULL");
                    strQuery.Append(" AND a.Country_id IS NULL AND a.City_id IS NULL");
                    strQuery.Append(" AND A.PRODUCT_CD = " + productId + " ");
                    strQuery.Append(" ORDER BY A.CREATED_DT DESC )WHERE ROWNUM ");
                    strQuery.Append(" BETWEEN 0 AND  " + (rowNum - 100) + " )");
                    strQuery.Append(" Order by CREATED_DT Desc");
                }
            }

            //OracleConnection con = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
            //IDataReader dr = OracleDataAccess.ExecuteReader(con, CommandType.Text, strQuery.ToString());

            //DataTable dt = new DataTable();
            //dt.Load(dr);
            //return dt;
            return objGetDataFromDB.GetDataTable(strQuery.ToString());
        }

        public DataTable GetNotePriority()
        {
            strQuery.Clear();
            strQuery.Append("SELECT NOTE_PRIORITY_CD, NOTE_PRIORITY_DESC FROM CSU_REF_NOTES_PRIORITY");
            return objGetDataFromDB.GetDataTable(strQuery.ToString());
        }

        public DataTable GetNoteCategory()
        {
            strQuery.Clear();
            strQuery.Append("SELECT NOTE_CATEGORY_CD, NOTE_CATEGORY_DESC FROM CSU_REF_NOTES_CATEGORY");
            return objGetDataFromDB.GetDataTable(strQuery.ToString());
        }

        public int AddNewNote(int Criteria, int productId, int regionId, int countryId, int cityId, string title, string category, string priority, string BegDate, string EndDate, string userId, string description)
        {
            OracleConnection connection = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
            try
            {
                connection.Open();
                strQuery.Clear();
                long noteId = 0;
                strQuery.Append("Select CSU_Note_id_S.NextVal from DUAL");
                DataTable dtNoteId = objGetDataFromDB.GetDataTable(strQuery.ToString());
                if (dtNoteId.Rows.Count > 0)
                {
                    noteId = Convert.ToInt64(dtNoteId.Rows[0]["NextVal"]);
                }
                else
                {
                    strQuery.Append("Select max(Note_id) + 1 from CSU_Notes");
                    DataTable dtCurrentNoteId = objGetDataFromDB.GetDataTable(strQuery.ToString());
                    if (dtCurrentNoteId.Rows.Count > 0)
                    {
                        noteId = Convert.ToInt64(dtCurrentNoteId.Rows[0]["Note_id"]);
                    }
                }

                if (userId == "")
                {
                    userId = "Null";
                }
                if (Criteria == 1)
                {
                    strQuery.Clear();
                    strQuery.Append("Insert into Csu_Notes (Note_id, Product_cd,");
                    strQuery.Append(" Note_title, Note_category_cd, Note_priority_cd,");
                    strQuery.Append(" Note_eff_beg_Date, Note_eff_end_Date, Created_emp_id, created_dt,");
                    strQuery.Append(" Updated_emp_id, Updated_dt, NOTE_CONTENT");
                    strQuery.Append(" ) Values ( " + noteId + ",");
                    strQuery.Append(" " + productId + " , '" + title + "' , '" + category + "','" + priority + "',  ");
                    strQuery.Append(" to_date('" + BegDate + "','MM/DD/YYYY') ,");
                    strQuery.Append(" to_date('" + EndDate + "','MM/DD/YYYY') ,");
                    strQuery.Append(" '" + userId + "', sysdate,");
                    strQuery.Append(" '" + userId + "', sysdate, '" + description + "' )");
                }
                else if (Criteria == 2)
                {
                    strQuery.Clear();
                    strQuery.Append("SELECT Region_name FROM CSU_Region WHERE Region_id = " + regionId + " ");
                    DataTable dtRegionDetails = objGetDataFromDB.GetDataTable(strQuery.ToString());
                    string sRegionName = Convert.ToString(dtRegionDetails.Rows[0]["Region_name"]);

                    strQuery.Clear();
                    strQuery.Append(" Insert into Csu_Notes (Note_id, Region_id, Product_cd,");
                    strQuery.Append(" Note_title, Note_category_cd, Note_priority_cd,");
                    strQuery.Append(" Note_eff_beg_Date, Note_eff_end_Date, Created_emp_id, created_dt,");
                    strQuery.Append(" Updated_emp_id, Updated_dt,note_symbol, NOTE_CONTENT");
                    strQuery.Append(" ) Values ( " + noteId + ", '" + regionId + "'  ,");
                    strQuery.Append(" " + productId + " , '" + title + "' , '" + category + "','" + priority + "',  ");
                    strQuery.Append(" to_date('" + BegDate + "','MM/DD/YYYY') ,");
                    strQuery.Append(" to_date('" + EndDate + "','MM/DD/YYYY') ,");
                    strQuery.Append(" '" + userId + "', sysdate,");
                    strQuery.Append(" '" + userId + "', sysdate, '" + sRegionName + "', '" + description + "') ");
                }
                else if (Criteria == 3)
                {
                    strQuery.Clear();
                    strQuery.Append("SELECT Region_id,country_name FROM CSU_Country WHERE Country_id = " + countryId + " ");
                    DataTable dtCountryDetails = objGetDataFromDB.GetDataTable(strQuery.ToString());
                    string sCountryName = countryId + "-" + Convert.ToString(dtCountryDetails.Rows[0]["country_name"]);
                    int regionCode = Convert.ToInt32(dtCountryDetails.Rows[0]["Region_id"]);

                    strQuery.Clear();
                    strQuery.Append("Insert into Csu_Notes (Note_id, Region_id, Product_cd,Country_id,");
                    strQuery.Append(" Note_title, Note_category_cd, Note_priority_cd, ");
                    strQuery.Append(" Note_eff_beg_Date, Note_eff_end_Date, Created_emp_id, created_dt,");
                    strQuery.Append(" Updated_emp_id, Updated_dt,note_symbol, NOTE_CONTENT");
                    strQuery.Append(" ) Values ( " + noteId + ", '" + regionCode + "'  ,");
                    strQuery.Append(" " + productId + " , " + countryId + ", '" + title + "' , '" + category + "','" + priority + "',  ");
                    strQuery.Append(" to_date('" + BegDate + "','MM/DD/YYYY') ,");
                    strQuery.Append(" to_date('" + EndDate + "','MM/DD/YYYY') ,");
                    strQuery.Append(" '" + userId + "', sysdate,");
                    strQuery.Append(" '" + userId + "', sysdate, '" + sCountryName.Replace(sCountryName, "''") + "', '" + description + "' ) ");
                }
                else if (Criteria == 4)
                {
                    strQuery.Clear();
                    strQuery.Append("SELECT Region_id, Country_id,city_name FROM CSU_CITY WHERE City_id = " + cityId + " ");
                    DataTable dtCityDetails = objGetDataFromDB.GetDataTable(strQuery.ToString());
                    if (dtCityDetails != null)
                    {
                        string sCityName = cityId + "-" + Convert.ToString(dtCityDetails.Rows[0]["city_name"]);
                        int regionCode = Convert.ToInt32(dtCityDetails.Rows[0]["Region_id"]);
                        int countryCode = Convert.ToInt32(dtCityDetails.Rows[0]["Country_id"]);


                        strQuery.Clear();
                        strQuery.Append("Insert into Csu_Notes (Note_id, Region_id, Product_cd,Country_id, City_id,");
                        strQuery.Append(" Note_title, Note_category_cd, Note_priority_cd, ");
                        strQuery.Append(" Note_eff_beg_Date, Note_eff_end_Date, Created_emp_id, created_dt, ");
                        strQuery.Append(" Updated_emp_id, Updated_dt,note_symbol, NOTE_CONTENT");
                        strQuery.Append(" ) Values ( " + noteId + ", '" + regionCode + "'  ,");
                        strQuery.Append(" " + productId + " , '" + countryCode + "' , '" + cityId + "' , '" + title + "' , '" + category + "','" + priority + "',  ");
                        strQuery.Append(" to_date('" + BegDate + "','MM/DD/YYYY') ,");
                        strQuery.Append(" to_date('" + EndDate + "','MM/DD/YYYY') ,");
                        strQuery.Append(" '" + userId + "', sysdate,");
                        strQuery.Append(" '" + userId + "', sysdate,'" + sCityName.Replace(sCityName, "''") + "', '" + description + "') ");
                    }
                }

                OracleCommand cmdOra = new OracleCommand(strQuery.ToString(), connection);
                cmdOra.CommandType = CommandType.Text;
                cmdOra.ExecuteNonQuery();
                return 1;
            }
            catch (Exception ex)
            {

            }
            finally
            {
                connection.Close();
                connection.Dispose();
            }
            //OracleDataAccess.ExecuteNonQuery(con, CommandType.Text, strQuery);
            return 0;
        }

        public string GetUserName(string userId)
        {
            strQuery.Clear();
            string createdBy = string.Empty;
            strQuery.Append("select user_name from csu_user where emp_id='" + userId + "' ");
            DataTable dtEmpName = objGetDataFromDB.GetDataTable(strQuery.ToString());
            if (dtEmpName.Rows.Count > 0)
            {
                createdBy = Convert.ToString(dtEmpName.Rows[0]["user_name"]);
            }
            else
            {
                createdBy = "UNKNOWN";
            }
            return createdBy;
        }

        public int UpdateNote(int Criteria, int productId, int regionId, int countryId, int cityId, string title, string category, string priority, string BegDate, string EndDate, string userId, long noteId, string description)
        {
            OracleConnection connection = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
            try
            {
                connection.Open();
                if (userId == "")
                {
                    userId = "Null";
                }
                if (Criteria == 1)
                {
                    strQuery.Clear();
                    strQuery.Append("Update Csu_Notes set ");
                    strQuery.Append(" Note_Title = '" + title + "', Note_category_cd ='" + category + "', Note_priority_cd ='" + priority + "', Note_content ='" + description + "', ");
                    strQuery.Append(" Note_eff_beg_Date = to_date('" + BegDate + "','DD/MM/YYYY'), Note_eff_end_Date = to_date('" + EndDate + "','DD/MM/YYYY'), Updated_Emp_id ='" + userId + "', Updated_dt =sysdate ");
                    //strQuery.Append(" where Region_id='" + regionId + "' ");
                    strQuery.Append(" Where Product_cd=" + productId + " ");
                    strQuery.Append(" and Note_id=" + noteId + " ");
                }
                else if (Criteria == 2)
                {
                    strQuery.Clear();
                    strQuery.Append("Update Csu_Notes set ");
                    strQuery.Append(" Note_Title = '" + title + "', Note_category_cd ='" + category + "', Note_priority_cd ='" + priority + "', Note_content ='" + description + "', ");
                    strQuery.Append(" Note_eff_beg_Date = to_date('" + BegDate + "','DD/MM/YYYY'), Note_eff_end_Date = to_date('" + EndDate + "','DD/MM/YYYY'), Updated_Emp_id ='" + userId + "', Updated_dt =sysdate ");
                    //strQuery.Append(" where Region_id='" + regionId + "' ");
                    strQuery.Append(" where Product_cd=" + productId + " ");
                    strQuery.Append(" and Country_id is Null ");
                    strQuery.Append(" and City_id is Null ");
                    strQuery.Append(" and Note_id=" + noteId + " ");
                }
                else if (Criteria == 3)
                {
                    strQuery.Clear();
                    strQuery.Append("SELECT Region_id FROM CSU_Country WHERE Country_id =" + countryId + " ");
                    DataTable dtCountryDetails = objGetDataFromDB.GetDataTable(strQuery.ToString());
                    int regionCode = Convert.ToInt32(dtCountryDetails.Rows[0]["Region_id"]);

                    strQuery.Clear();
                    strQuery.Append("Update Csu_Notes set ");
                    strQuery.Append(" Note_Title = '" + title + "', Note_category_cd ='" + category + "', Note_priority_cd ='" + priority + "', Note_content ='" + description + "', ");
                    strQuery.Append(" Note_eff_beg_Date = to_date('" + BegDate + "','DD/MM/YYYY'), Note_eff_end_Date = to_date('" + EndDate + "','DD/MM/YYYY'), Updated_Emp_id ='" + userId + "', Updated_dt =sysdate ");
                    //strQuery.Append(" where Region_id='" + regionCode + "' ");
                    strQuery.Append(" where Product_cd=" + productId + " ");
                    strQuery.Append(" and Country_id= " + countryId + " ");
                    strQuery.Append(" and City_id is Null ");
                    strQuery.Append(" and Note_id=" + noteId + " ");
                }
                else if (Criteria == 4)
                {
                    strQuery.Clear();
                    strQuery.Append("SELECT Region_id, Country_id FROM CSU_CITY WHERE City_id = " + cityId + " ");
                    DataTable dtCityDetails = objGetDataFromDB.GetDataTable(strQuery.ToString());
                    if (dtCityDetails != null)
                    {
                        string sCityName = cityId + "-" + Convert.ToString(dtCityDetails.Rows[0]["city_name"]);
                        int regionCode = Convert.ToInt32(dtCityDetails.Rows[0]["Region_id"]);
                        int countryCode = Convert.ToInt32(dtCityDetails.Rows[0]["Country_id"]);


                        strQuery.Clear();
                        strQuery.Append("Update Csu_Notes set ");
                        strQuery.Append(" Note_Title = '" + title + "', Note_category_cd ='" + category + "', Note_priority_cd ='" + priority + "', Note_content ='" + description + "', ");
                        strQuery.Append(" Note_eff_beg_Date = to_date('" + BegDate + "','DD/MM/YYYY'), Note_eff_end_Date = to_date('" + EndDate + "','DD/MM/YYYY'), Updated_Emp_id ='" + userId + "', Updated_dt =sysdate ");
                        //strQuery.Append(" where Region_id='" + regionCode + "' ");
                        strQuery.Append(" where Product_cd=" + productId + " ");
                        strQuery.Append(" and Country_id= " + countryCode + " ");
                        strQuery.Append(" and City_id= " + cityId + " ");
                        strQuery.Append(" and Note_id=" + noteId + " ");
                    }
                    else
                    {
                        return 0;
                    }
                }

                OracleCommand cmdOra = new OracleCommand(strQuery.ToString(), connection);
                cmdOra.CommandType = CommandType.Text;
                cmdOra.ExecuteNonQuery();
                return 1;
            }
            catch (Exception ex)
            {

            }
            finally
            {
                connection.Close();
                connection.Dispose();
            }
            //OracleDataAccess.ExecuteNonQuery(con, CommandType.Text, strQuery);
            return 0;
        }

        public int DeleteNote(string noteId)
        {
            OracleConnection connection = new OracleConnection(ConfigurationManager.AppSettings.Get("OraConnString"));
            //int reportColumnCd = GetReportColumnCdData(reportId, orderCd);
            try
            {
                connection.Open();
                strQuery.Clear();
                strQuery.Append("DELETE FROM CSU_NOTES WHERE Note_id ='" + noteId + "' ");
                OracleCommand cmdOra = new OracleCommand(strQuery.ToString(), connection);
                cmdOra.CommandType = CommandType.Text;
                cmdOra.ExecuteNonQuery();
                return 1;
            }
            catch (Exception ex)
            {

            }
            finally
            {
                connection.Close();
                connection.Dispose();
            }
            return 0;
        }

        public string GetEmpName(int empId)
        {
            strQuery.Clear();
            string strEmpName = string.Empty;
            strQuery.Append("select User_name from csu_user where emp_id='" + empId + "' ");
            DataTable dtEmpName =  objGetDataFromDB.GetDataTable(strQuery.ToString());
            if (dtEmpName.Rows.Count > 0)
            {
                strEmpName = Convert.ToString(dtEmpName.Rows[0]["User_name"]);
            }
            else
            {
                strEmpName = string.Empty;
            }
            return strEmpName;
        }

        #endregion




        //public void test() 
        //{
        //    OracleBulkCopy a = new OracleBulkCopy();
        //}


        //#region Acess Supplier

        //public DataTable GetAccessSuppliers()
        //{
        //    strQuery.Clear();
        //    strQuery.Append("SELECT DISTINCT char_name AS supplier_name, crvc.char_id as supplierid");
        //    strQuery.Append(" FROM csu_ref_valid_char crvc,");
        //    strQuery.Append(" capman_access_cases_map cacm,");
        //    strQuery.Append(" capman_supplier_map supplier_map");
        //    strQuery.Append(" WHERE char_type_id = 505");
        //    strQuery.Append(" AND cacm.c_supplier_id = supplier_map.c_supplier_id");
        //    strQuery.Append(" AND supplier_map.pc_supplier_id = crvc.char_id order by Upper(char_name)");
        //    return objGetDataFromDB.GetDataTable(strQuery.ToString());
        //}

        //#endregion


    }
}
