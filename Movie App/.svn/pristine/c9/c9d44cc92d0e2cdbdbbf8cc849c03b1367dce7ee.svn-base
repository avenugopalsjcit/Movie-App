app.directive('mcuTree', function ($compile) {
    return {
        restrict: 'E',
        templateUrl: 'Views/Masscaseupdate/mcu_CountryTree.htm',

        controller: function ($scope, MCUHelper) {
            $scope.lstRegion = [];
            $scope.lstCountry = [];

            $scope.$on('loadTree', function (event, args) {
                $scope.loadTree(args.resetCase.caseValidity);

            });

            $scope.getTreeDataFromDB = function () {
                $('.pageLoaderOverlay').show();
                MCUHelper.GetCountryTreeContent().success(function (data) {
                    $scope.lstRegion = JSON.parse(data.d)[0];
                    $scope.lstCountryList = JSON.parse(data.d)[1];
                    $scope.lstCountry = $.grep($scope.lstCountryList, function (e) { return e.CASEVALIDCD == '1' });
                    $scope.treeLoaded = true;
                    $scope.stopeLoader();

                }).error(function () {
                    $('.pageLoaderOverlay').hide();
                });
            }
            $scope.getTreeDataFromDB();

            $scope.loadTree = function (selectedState) {
                if (selectedState != -1) {
                    $scope.lstCountry = $.grep($scope.lstCountryList, function (e) { return e.CASEVALIDCD == selectedState });
                }
                else
                    $scope.lstCountry = $scope.lstCountryList;
                $('.pageLoaderOverlay').hide();
            }
        },
        link: function (scope, elem, attr) {

            $('.checktree-root').on('change', 'input[type="checkbox"]', function (e) {
                checkChildren($(this));
                checkParents($(this));
                scope.selectedCountry = [];
                scope.selectedcaseId = [];
                $('.wTreeStyle input:checked').each(function () {
                    if ($(this).attr('id').indexOf("ChkRegion") > -1) {
                        var regionId = $(this).attr('id').replace('ChkRegion', '');
                        scope.lstCountry.forEach(function (item) {
                            if (item.PARENTID == regionId) {
                                if (scope.selectedCountry.indexOf(item.COUNTRY_ID) == -1) {
                                    scope.selectedCountry.push(item.COUNTRY_ID);
                                    scope.selectedcaseId.push(item.CASEID);
                                }
                            }
                        });
                    }
                    if ($(this).attr('id').indexOf("chkCountry") > -1) {
                        var countryId = $(this).attr('id').replace('chkCountry', '');
                        var caseID = $(this).attr('cases');
                        if (scope.selectedCountry.indexOf(countryId) == -1) {
                            scope.selectedCountry.push(countryId);
                            scope.selectedcaseId.push(caseID);
                        }
                    }
                });

                if (scope.selectedCountry.length == 0) { $("#saveContinue").prop('disabled', true); }
                else { $("#saveContinue").prop('disabled', false); }

            });


            var openFolderIcon = "image/openfolder.gif";
            var closeFolderIcon = "image/closefolder.gif";
            scope.loadChildList = function (parentID, type) {
                $('.pageLoaderOverlay').show();
                var imgtagID = "regionfolderImage" + parentID;
                var folderIcon = toggleFolderImage(imgtagID);
                var childID = "regionChild" + parentID;
                if (folderIcon == openFolderIcon) {
                    if ($("#" + childID + "").html() == '') {
                        var html = '<ul>';

                        scope.lstCountry.forEach(function (item) {
                            if (parentID == item.PARENTID) {
                                if (item.HASCASE == 0) {
                                    if ($("#ChkRegion" + parentID).prop("checked")) {
                                        html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' checked='checked' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span class='text-red'>" + item.COUNTRY_NAME + "</span></li>";
                                    } else {
                                        html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span class='text-red'>" + item.COUNTRY_NAME + "</span></li>";
                                    }
                                } else {

                                    switch (item.CASEVALIDCD) {
                                        case 1:
                                            if ($("#ChkRegion" + parentID).prop("checked")) {
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' checked='checked' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span class='text-green'>" + item.COUNTRY_NAME + "</span></li>";
                                            } else {
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span class='text-green'>" + item.COUNTRY_NAME + "</span></li>";
                                            }
                                            break;
                                        default:
                                            if ($("#ChkRegion" + parentID).prop("checked")) {
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' checked='checked' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span>" + item.COUNTRY_NAME + "</span></li>";
                                            } else {
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span>" + item.COUNTRY_NAME + "</span></li>";
                                            }
                                            break;
                                    }
                                }
                            }
                        });

                        html += "</ul>";
                        var temp = $compile(html)(scope);
                        $("#" + childID + "").html(temp);

                        $('.pageLoaderOverlay').hide();
                    } else {
                        $("#" + childID + "").show();
                        $('.pageLoaderOverlay').hide();
                    }
                } else {
                    $("#" + childID + "").hide();
                    $('.pageLoaderOverlay').hide();
                }
            }
        }
    }
});

app.directive('caseValidity', function ($compile) {
    return {
        restrict: 'E',
        templateUrl: 'Views/Masscaseupdate/CaseValidityTemplate.htm',

        controller: function ($scope, $timeout) {
            $scope.lstValidCase = [{ id: -1, text: "--No Change--" }, { id: 0, text: "Invalid" }, { id: 1, text: "Valid"}]
            $scope.modValidCase = $scope.lstValidCase[0];
            $timeout(function () {
                $("#ddlcasevalid").select2();
            });

        },
        link: function (scope, elem, attr) {

        }
    }
});

app.directive('caseAvailability', function () {
    return {
        restrict: 'E',
        templateUrl: 'Views/Masscaseupdate/CaseAvailabilityTemplate.htm',

        controller: function ($scope, $timeout, MCUHelper) {
            MCUHelper.getPortCaseAvail().success(function (data) {
                var availText = JSON.parse(data.d);
                var ddlDefaultSelect = { 'AVAIL_ABBR': '', 'AVAIL_CD': 0, AVAIL_DESC: '--No Change--', 'AVAIL_VALID_CD': '' };
                availText.splice(0, '0', ddlDefaultSelect);
                $scope.lstCaseAvail = availText;
                $scope.modCaseAvail = availText[0];
                $timeout(function () {
                    $("#ddlCaseAvail").select2();
                });

            });
        },
        link: function (scope, elem, attr) {

        }
    }
});

app.directive('displayCharlist', function (MCUHelper, $compile, $ngBootbox) {
    return {
        restrict: 'E',
        templateUrl: 'Views/Masscaseupdate/DisplayCharTemplate.htm',

        controller: function ($scope) {
            $('.pageLoaderOverlay').show();
            MCUHelper.GetCharectristic($scope.MCUSession.ProductCd, $scope.MCUSession.SubProductCd).success(function (data) {
                $scope.lstCharecteristics = JSON.parse(data.d)[0];
                $scope.charTypeList = JSON.parse(data.d)[1];
                $scope.charLoaded = true;
                $scope.stopeLoader();
            });

            $scope.resetChar = function () {
                $scope.modSelectedchar = [];
                $('#selectedChar').empty();
            }

            $scope.resetCharBtn = function () {
                if ($scope.modSelectedchar != undefined && $scope.modSelectedchar.length > 0) {
                    $ngBootbox.confirm('Your current selected characteristics will be lost.Are you sure that you want to reset?')
            .then(function () {
                $scope.resetChar();
            });
                }
            }

            $scope.toggleCheckox = function (charid) {
                if ($("#chkSelect" + charid).is(':checked')) {
                    $("#chkValid" + charid).attr("disabled", false);
                    $("#chkChangeVal" + charid).attr("disabled", false);
                } else {
                    $("#chkValid" + charid).attr("disabled", true);
                    $("#chkValid" + charid).attr('checked', false);
                    $("#chkChangeVal" + charid).attr("disabled", true);
                    $("#chkChangeVal" + charid).attr("checked", false);
                    $("#txt" + charid).attr("disabled", true);
                    $("#txt" + charid).val("");
                }
            }

            $scope.toggletextbox = function (charid) {
                if ($("#chkChangeVal" + charid).is(':checked')) {
                    $("#txt" + charid).attr("disabled", false);
                } else {
                    $("#txt" + charid).attr("disabled", true);
                    $("#txt" + charid).val("");
                }
            }



            function callWriteCharTable() {
                if ($scope.counter == $scope.modSelectedchar.length) {
                    var html = app.writeSelectedCharTable($scope, $compile);
                }
            }
            $scope.availoptionvalue = '';
            $scope.addSelectedChar = function () {
                if ($('.wTreeStyle input:checked').length == 0) {
                    bootbox.alert("Please make a selection in the Case Selection box");
                    return;
                }

                if ($scope.modSelectedchar == undefined || $scope.modSelectedchar.length == 0) {
                    bootbox.alert("Please Select a Characteristic Type");
                    return;
                }
                $('.pageLoaderOverlay').show();
                $scope.selectedCharTypeID = getStringArray($scope.modSelectedchar, 'CHAR_TYPE_ID');
                $scope.selectedCharList = [];
                $scope.selectedAccessSupplier = [];
                $scope.parentPortSpeedList = [];
                $scope.counter = 0;

                $scope.modSelectedchar.forEach(function (selectedCharType) {
                    //If the array value selected is not access supplier or parentportspeed
                    if (selectedCharType.CHAR_TYPE_ID != -1 && selectedCharType.CHAR_TYPE_ID != -2) {
                        $scope.charTypeList.forEach(function (item) {
                            if (item.CHAR_TYPE_ID == selectedCharType.CHAR_TYPE_ID) {
                                $scope.selectedCharList.push(item);
                            }
                        });
                        $scope.counter++;
                        callWriteCharTable();
                    }
                    else {
                        if (selectedCharType.CHAR_TYPE_ID == -1) {
                            MCUHelper.getAccessSupplier($scope.selectedPoPs).success(function (data) {
                                $scope.selectedAccessSupplier = JSON.parse(data.d);
                                $scope.counter++;
                                callWriteCharTable();
                            }).error(function () { console.log("failed to load Access supplier data"); });
                        }
                        else {
                            MCUHelper.getParentPortSpeed($scope.selectedPoPs, $scope.selectedPlatform, $scope.MCUSession.ProductCd, $scope.MCUSession.SubProductCd)
                    .success(function (data) {
                        $scope.parentPortSpeedList = data.d;
                        $scope.counter++;
                        callWriteCharTable();
                    });
                        }
                    }
                });
            }
        },
        link: function (scope, elem, attr) {


        }
    }
});
