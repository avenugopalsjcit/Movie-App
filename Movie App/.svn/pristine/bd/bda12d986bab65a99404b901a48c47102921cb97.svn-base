app.controller("Controller.CountryNoPort", function ($scope, $compile, $ngBootbox, MCUParam, MCUHelper) {
    $('.pageLoaderOverlay').hide();

    $("#lstRegionlist").select2();
    $("#CaseAvailDDL").select2();
    $("#ValidCaseDDL").select2();
    $scope.MCUSession = MCUParam.getMCUSession();

    $scope.writeSavedCases = function () {

    }

});

app.directive('mcuTree', function ($compile) {
    return {
        restrict: 'E',
        templateUrl: '../../Views/Masscaseupdate/mcu_CountryTree.htm',

        controller: function ($scope, MCUHelper) {
            MCUHelper.GetCountryTreeContent().success(function (data) {
                $scope.lstRegion = JSON.parse(data.d)[0];
                $scope.lstCountry = JSON.parse(data.d)[1];
            });
        },
        link: function (scope, elem, attr) {

            $('.checktree-root').on('change', 'input[type="checkbox"]', function (e) {
                checkChildren($(this));
                checkParents($(this));
            });


            var openFolderIcon = "image/openfolder.gif";
            var closeFolderIcon = "image/closefolder.gif";
            scope.loadChildList = function (parentID, type) {
                var imgtagID = "regionfolderImage" + parentID;
                var folderIcon = toggleFolderImage(imgtagID);
                var childID = "regionChild" + parentID;
                if (folderIcon == openFolderIcon) {
                    if ($("#" + childID + "").html() == '') {
                        switch (type) {
                            case 'Co':
                                var html = '<ul>';
                                scope.lstCountry.forEach(function (item) {
                                    if (parentID == item.PARENTID) {
                                        if ($("#ChkRegion" + parentID).prop("checked")) {
                                            if (item.CASEVALIDCD == 0)
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' checked='checked' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span>" + item.COUNTRY_NAME + "</span></li>";
                                            else {
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' checked='checked' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span class='text-green'>" + item.COUNTRY_NAME + "</span></li>";
                                            }
                                        } else {
                                            if (item.CASEVALIDCD == 0)
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span>" + item.COUNTRY_NAME + "</span></li>";
                                            else {
                                                html += "<li><input id='chkCountry" + item.COUNTRY_ID + "' type='checkbox' cases='" + item.CASEID + "' caseValidCd='" + item.CASEVALIDCD + "' parent='" + item.PARENTID + "'/> <span class='text-green'>" + item.COUNTRY_NAME + "</span></li>";
                                            }
                                        }
                                    }
                                });
                        }
                        html += "</ul>";
                        var temp = $compile(html)(scope);
                        $("#" + childID + "").html(temp);

                        $('.pageLoaderOverlay').hide();
                    } else {
                        $("#" + childID + "").show();
                    }
                } else {
                    $("#" + childID + "").hide();
                }
            }
        }
    }
});

app.directive('caseValidity', function ($compile) {
    return {
        restrict: 'E',
        templateUrl: '../../Views/Masscaseupdate/CaseValidityTemplate.htm',

        controller: function ($scope, $timeout) {
            $scope.lstValidCase = [{ id: -1, text: "--No Change--" }, { id: 0, text: "Invalid" }, { id: 1, text: "Valid"}]
            $scope.modValidCase = $scope.lstValidCase[0];
            $timeout(function () {
                $("#ddlcasevalid").select2();
            });

        },
        link: function (scope, elem, attr) {

        }
    }
});

app.directive('caseAvailability', function () {
    return {
        restrict: 'E',
        templateUrl: '../../Views/Masscaseupdate/CaseAvailabilityTemplate.htm',

        controller: function ($scope, $timeout, MCUHelper) {
            MCUHelper.getPortCaseAvail().success(function (data) {
                var availText = JSON.parse(data.d);
                var ddlDefaultSelect = { 'AVAIL_ABBR': '', 'AVAIL_CD': 0, AVAIL_DESC: '--No Change--', 'AVAIL_VALID_CD': '' };
                availText.splice(0, '0', ddlDefaultSelect);
                $scope.lstCaseAvail = availText;
                $scope.modCaseAvail = availText[0];
                $timeout(function () {
                    $("#ddlCaseAvail").select2();
                });

            });
        },
        link: function (scope, elem, attr) {

        }
    }
});

app.directive('displayCharlist', function (MCUHelper, $compile) {
    return {
        restrict: 'E',
        templateUrl: '../../Views/Masscaseupdate/DisplayCharTemplate.htm',

        controller: function ($scope) {
            MCUHelper.GetCharectristic($scope.MCUSession.ProductCd, $scope.MCUSession.SubProductCd).success(function (data) {
                $scope.lstCharecteristics = JSON.parse(data.d)[0];
                $scope.charTypeList = JSON.parse(data.d)[1];
            });

            $scope.toggleCheckox = function (charid) {
                if ($("#chkSelect" + charid).is(':checked')) {
                    $("#chkValid" + charid).attr("disabled", false);
                    $("#chkChangeVal" + charid).attr("disabled", false);
                } else {
                    $("#chkValid" + charid).attr("disabled", true);
                    $("#chkValid" + charid).attr('checked', false);
                    $("#chkChangeVal" + charid).attr("disabled", true);
                    $("#chkChangeVal" + charid).attr("checked", false);
                    $("#txt" + charid).attr("disabled", true);
                    $("#txt" + charid).val("");
                }
            }

            $scope.toggletextbox = function (charid) {
                if ($("#chkChangeVal" + charid).is(':checked')) {
                    $("#txt" + charid).attr("disabled", false);
                } else {
                    $("#txt" + charid).attr("disabled", true);
                    $("#txt" + charid).val("");
                }
            }

            $scope.resetCharBtn = function () {
                if ($scope.modSelectedchar != undefined && $scope.modSelectedchar.length > 0) {
                    $ngBootbox.confirm('Your current selected characteristics will be lost.Are you sure that you want to reset?')
            .then(function () {
                $scope.resetChar();
            });
                }
            }

            $scope.resetChar = function () {
                $scope.modSelectedchar = [];
                $('#selectedChar').empty();
            }

            $scope.savedCharList = [];
            function saveSelectedChar() {

                $(".chkSelectcol input:checked").each(function (e) {
                    var CharId = $(this).attr('id').replace('chkSelect', '');
                    var Type = $(this).attr('charType');
                    if ($scope.savedCharList.length == 0 || getStringArray($scope.savedCharList, 'CharId').indexOf(CharId) == -1) {
                        var productchar = {};
                        productchar.CharId = CharId;
                        productchar.CharName = $('#charname' + productchar.CharId).text();

                        productchar.CharAvailCd = $("#avail" + productchar.CharId).val();

                        productchar.CharAvailText = $("#avail" + productchar.CharId + " :selected").text();

                        if (Type == '')
                            productchar.CharTypeId = $.grep($scope.selectedCharList, function (e) { return e.CHAR_ID == productchar.CharId })[0].CHAR_TYPE_ID;
                        if (Type == 'AccSupp')
                            productchar.CharTypeId = -1;
                        if (Type == 'ParentPortSpeed')
                            productchar.CharTypeId = -2;
                        productchar.CharValue = $("#txt" + productchar.CharId).val() == undefined ? '' : $("#txt" + productchar.CharId).val();
                        productchar.CharValue2 = '';
                        productchar.ValidCd = $("#chkValid" + productchar.CharId).is(':checked') == true ? 1 : 0;
                        productchar.ValidText = $("#chkValid" + productchar.CharId).is(':checked') == true ? 'Valid' : 'Invalid';
                        productchar.Type = Type;
                        $scope.savedCharList.push(productchar);
                    }
                });
            }

            function callWriteCharTable() {
                if ($scope.counter == $scope.modSelectedchar.length) {
                    var html = app.writeSelectedCharTable($scope, $compile);
                }
            }
            $scope.availoptionvalue = '';
            $scope.addSelectedChar = function () {
                if ($('.wTreeStyle input:checked').length == 0) {
                    bootbox.alert("Please make a selection in the Case Selection box");
                    return;
                }

                if ($scope.modSelectedchar == undefined || $scope.modSelectedchar.length == 0) {
                    bootbox.alert("Please Select a Characteristic Type");
                    return;
                }
                $('.pageLoaderOverlay').show();
                $scope.selectedCharTypeID = getStringArray($scope.modSelectedchar, 'CHAR_TYPE_ID');
                $scope.selectedCharList = [];
                $scope.selectedAccessSupplier = [];
                $scope.parentPortSpeedList = [];
                $scope.counter = 0;

                $scope.modSelectedchar.forEach(function (selectedCharType) {
                    //If the array value selected is not access supplier or parentportspeed
                    if (selectedCharType.CHAR_TYPE_ID != -1 && selectedCharType.CHAR_TYPE_ID != -2) {
                        $scope.charTypeList.forEach(function (item) {
                            if (item.CHAR_TYPE_ID == selectedCharType.CHAR_TYPE_ID) {
                                $scope.selectedCharList.push(item);
                            }
                        });
                        $scope.counter++;
                        callWriteCharTable();
                    }
                    else {
                        if (selectedCharType.CHAR_TYPE_ID == -1) {
                            MCUHelper.getAccessSupplier($scope.selectedPoPs).success(function (data) {
                                $scope.selectedAccessSupplier = JSON.parse(data.d);
                                $scope.counter++;
                                callWriteCharTable();
                            }).error(function () { console.log("failed to load Access supplier data"); });
                        }
                        else {
                            MCUHelper.getParentPortSpeed($scope.selectedPoPs, $scope.selectedPlatform, $scope.MCUSession.ProductCd, $scope.MCUSession.SubProductCd)
                    .success(function (data) {
                        $scope.parentPortSpeedList = data.d;
                        $scope.counter++;
                        callWriteCharTable();
                    });
                        }
                    }
                });
            }
        },
        link: function (scope, elem, attr) {


        }
    }
});
