using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.OracleClient;
using System.Configuration;
using System.Reflection;

namespace SCAdmin
{
    public partial class FileDownload : System.Web.UI.Page
    {
        string ConnectionString = ConfigurationManager.AppSettings.Get("OraConnString");

        protected void Page_Load(object sender, EventArgs e)
        {
            int productID = int.Parse(Request.QueryString["productID"].ToString());
            int FileType = int.Parse(Request.QueryString["FileTypeId"].ToString());
            ExporttoExcel(FileType, getDataFromDB(FileType, productID));
        }

        private DataTable getDataFromDB(int FiletypeId, int ProductId)
        {
            //  string Query = "select * from Vw_Dsl_Sp_Plus_Std_Report where rownum<10";

            string query = string.Empty;
            switch (FiletypeId)
            {
                case 0:
                    query = "select * from VW_PRODUCT_BT_BASELINE_BFD where product_cd=" + ProductId + "";
                    break;
                case 1:
                    query = "select * from vw_cos_table1_data where product_cd=" + ProductId + " ";
                    break;
                case 2:
                    query = "select * from vw_cos_table4_data where product_cd=" + ProductId + " ";
                    break;
                case 3:
                    query = "select * from vw_cos_table5_data where product_cd=" + ProductId + " ";
                    break;
                case 4:
                    query = "select * from vw_product_sla_master where product_cd=" + ProductId + "";
                    break;
                default:
                    break;
            }

            OracleConnection oCon = new OracleConnection(ConnectionString);
            OracleDataAdapter Adp = new OracleDataAdapter(query, oCon);
            DataTable Dt = new DataTable();
            Adp.Fill(Dt);
            return Dt;
        }



        //private void ExporttoExcel(int FileType, DataTable table)
        //{
        //    //Create Excel Objects
        //    Microsoft.Office.Interop.Excel.Application oExcel = new Microsoft.Office.Interop.Excel.Application();
        //    Microsoft.Office.Interop.Excel.Workbooks oBooks;
        //    Microsoft.Office.Interop.Excel.Sheets oSheets;
        //    Microsoft.Office.Interop.Excel.Workbook oBook;
        //    Microsoft.Office.Interop.Excel.Worksheet oSheet;

        //    //Create New Excel WorkBook
        //    oExcel.Visible = true;
        //    oExcel.DisplayAlerts = false;
        //    oExcel.Application.SheetsInNewWorkbook = 1;
        //    oBooks = oExcel.Workbooks;

        //    oBook = (Microsoft.Office.Interop.Excel.Workbook)(oExcel.Workbooks.Add(Type.Missing));
        //    oSheets = oBook.Worksheets;
        //    oSheet = (Microsoft.Office.Interop.Excel.Worksheet)oSheets.get_Item(1);
        //    oSheet.Name = "FinalData";

        //    // Create Array to hold the data of DataTable
        //    object[,] arr = new object[table.Rows.Count, table.Columns.Count];

        //    //Fill DataTable in Array
        //    for (int r = 0; r < table.Rows.Count; r++)
        //    {
        //        DataRow dr = table.Rows[r];
        //        for (int c = 0; c < table.Columns.Count; c++)
        //        {
        //            arr[r, c] = dr[c];
        //        }
        //    }

        //    //Set Excel Range to Paste the Data
        //    Microsoft.Office.Interop.Excel.Range c1 = (Microsoft.Office.Interop.Excel.Range)oSheet.Cells[1, 1];
        //    Microsoft.Office.Interop.Excel.Range c2 = (Microsoft.Office.Interop.Excel.Range)oSheet.Cells[1 + table.Rows.Count - 1, table.Columns.Count];
        //    Microsoft.Office.Interop.Excel.Range range = oSheet.get_Range(c1, c2);

        //    //Fill Array in Excel
        //    range.Value2 = arr;


        //}







        private void ExporttoExcel(int FileType, DataTable table)
        {
            string number = "";
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Response.ClearContent();
            HttpContext.Current.Response.ClearHeaders();
            HttpContext.Current.Response.Buffer = true;
            HttpContext.Current.Response.ContentType = "application/ms-excel";
            HttpContext.Current.Response.Write(@"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">");
            switch (FileType)
            {
                case 0:
                    HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=BTBaseLine.xls");
                    break;
                case 1:
                    HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=Costable1.xls");
                    break;
                case 2:
                    HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=Costable4.xls");
                    break;
                case 3:
                    HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=Costable5.xls");
                    break;
                case 4:
                    HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=SLAMaster.xls");
                    break;
                default:
                    break;
            }
            //HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=DSL_SP_PLUS_MATRIX.xls");




            HttpContext.Current.Response.Charset = "utf-8";
            HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.GetEncoding("windows-1250");
            //sets font
            string style = @"<style> .textmode { } </style>";
            HttpContext.Current.Response.Write(style);
            HttpContext.Current.Response.Write("<font style='font-size:10.0pt; font-family:Calibri;'>");
            HttpContext.Current.Response.Write("<BR><BR><BR>");
            //sets the table border, cell spacing, border color, font of the text, background, foreground, font height
            HttpContext.Current.Response.Write("<Table border='1' bgColor='#ffffff' " +
              "borderColor='#000000' cellSpacing='0' cellPadding='0' " +
              "style='font-size:12.0pt; font-family:Calibri; background:white;'> <TR>");
            //am getting my grid's column headers
            //int columnscount = gvExceptions.Columns.Count;
            int columnscount = table.Columns.Count;
            for (int j = 0; j < columnscount; j++)
            {      //write in new column
                HttpContext.Current.Response.Write("<Td>");
                //Get column headers  and make it as bold in excel columns
                HttpContext.Current.Response.Write("<B>");
                HttpContext.Current.Response.Write(table.Columns[j].ColumnName.ToString());
                HttpContext.Current.Response.Write("</B>");
                HttpContext.Current.Response.Write("</Td>");
            }
            HttpContext.Current.Response.Write("</TR>");
            foreach (DataRow row in table.Rows)
            {//write in new row
                HttpContext.Current.Response.Write("<TR>");
                for (int i = 0; i < table.Columns.Count; i++)
                {
                    HttpContext.Current.Response.Write("<Td>");
                    if (row[i].ToString().Contains(':'))
                    {
                        number = row[i].ToString().Replace(":", " . ");
                        HttpContext.Current.Response.Write(number);
                    }
                    else if (row[i].ToString().Contains('/') && i == 31)
                    {
                        number = row[i].ToString().Replace("/", @" \ ");
                        HttpContext.Current.Response.Write(number);
                    }
                    else
                        HttpContext.Current.Response.Write(row[i].ToString());
                    HttpContext.Current.Response.Write("</Td>");
                }

                HttpContext.Current.Response.Write("</TR>");
            }
            HttpContext.Current.Response.Write("</Table>");
            HttpContext.Current.Response.Write("</font>");
            // HttpContext.Current.Response.Flush();
            HttpContext.Current.Response.End();
        }







    }
}