/// <reference path="Scripts/jquery-1.4.1-vsdoc.js" />
/// <reference path="Scripts/jquery-1.4.1.js" />
/// <reference path="Scripts/jquery-1.4.1.min.js" />



var app = angular.module("app", ['ngRoute', "ngResource", "ngTable", 'ui.router', 'ui.bootstrap', 'ngBootbox']);

//var app = angular.module("app", ['ngRoute', "ngResource", "ngTable", 'ui.router', ]);


// user services --Madan


app.factory('UserInfo', function ($http) {
    var UserInfo = {};
    UserInfo.GetUserDetails = function (EINInfo) {
        if (angular.isDefined(EINInfo)) {
            return $http.post('UsersData.aspx/GetUserDetails',
             { 'EIN': EINInfo, 'UserName': "SCLDAP", 'Password': "SCLDAP-de" });
            //return $http.post('UsersData.aspx/GetUserDetails1', {});
        }
        else {
            //alert("Please enter User Identifier.");
            bootbox.alert("Please enter User Identifier");
            $(".pageLoaderOverlay").hide();
        }

    }
    return UserInfo;
});

app.factory('MonthlyReport', function ($http) {

    var MonthlyReport = {};
    MonthlyReport.GetMonthlyUsageReport = function (reportType) {
        return $http.post('MonthlyUsaseReport.aspx/GetMonthlyUsageReport', { 'criteria': reportType });
    }
    return MonthlyReport;
});

app.factory('WeeklyReport', function ($http) {

    var WeeklyReport = {};
    WeeklyReport.GetWeeklyStartAndEndDates = function () {
        return $http.post('WeeklyUsageReport.aspx/GetWeeklyStartAndEndDates', {});
    }
    WeeklyReport.GetWeeklyUsageReport = function (modWeeklyReport) {
        return $http.post('WeeklyUsageReport.aspx/GetWeeklyUsageReport', { 'weeklyReport': modWeeklyReport });
    }
    return WeeklyReport;
});

app.factory('CapmanAccessReport', function ($http) {

    var CapmanAccessReport = {};
    CapmanAccessReport.FetchProducts = function (userid, issuperuser) {
        return $http.post('Reports.aspx/FetchProducts', { 'userid': userid, 'issuperuser': issuperuser });
    }
    CapmanAccessReport.FetchCountriesByProduct = function (productid) {
        return $http.post('Reports.aspx/FetchCountriesByProduct', { 'productid': productid });
    }
    CapmanAccessReport.FetchAccessSuppliers = function (countryid) {
        return $http.post('Reports.aspx/FetchAccessSuppliers', { 'countryid': countryid });
    }
    CapmanAccessReport.FetchAccessSpeeds = function (countryid, supplierid) {
        return $http.post('Reports.aspx/FetchAccessSpeeds', { 'countryid': countryid, 'supplierid': supplierid });
    }
    CapmanAccessReport.FetchInterfaceTypes = function (countryid, supplierid, accessSpeedId) {
        return $http.post('Reports.aspx/FetchInterfaceTypes', { 'countryid': countryid, 'supplierid': supplierid, 'accessSpeedId': accessSpeedId });
    }
    CapmanAccessReport.GetAccessReportData = function (countryid, supplierid, accessSpeedId, InterfaceType) {
        return $http.post('Reports.aspx/GetAccessReportData', { 'countryid': countryid, 'supplierid': supplierid, 'accessSpeedId': accessSpeedId, 'InterfaceType': InterfaceType });
    }
    return CapmanAccessReport;
});

app.factory('CapmanReport', function ($http) {
    var CapmanReport = {};
    CapmanReport.FetchProducts = function (userid, issuperuser) {
        return $http.post('Reports.aspx/FetchProducts', { 'userid': userid, 'issuperuser': issuperuser });
    }
    CapmanReport.FetchSubProducts = function (productid) {
        return $http.post('Reports.aspx/FetchSubProducts', { 'productid': productid });
    }
    CapmanReport.FetchCountriesByProduct = function (productid) {
        return $http.post('Reports.aspx/FetchCountriesByProduct', { 'productid': productid });
    }
    CapmanReport.FetchAccessSuppliers = function (countryid) {
        return $http.post('Reports.aspx/FetchAccessSuppliers', { 'countryid': countryid });
    }
    CapmanReport.FetchAccessSpeeds = function (countryid, supplierid) {
        return $http.post('Reports.aspx/FetchAccessSpeeds', { 'countryid': countryid, 'supplierid': supplierid });
    }
    CapmanReport.FetchInterfaceTypes = function (countryid, supplierid, accessSpeedId) {
        return $http.post('Reports.aspx/FetchInterfaceTypes', { 'countryid': countryid, 'supplierid': supplierid, 'accessSpeedId': accessSpeedId });
    }
    CapmanReport.GetAccessReportData = function (countryid, supplierid, accessSpeedId, InterfaceType) {
        return $http.post('Reports.aspx/GetAccessReportData', { 'countryid': countryid, 'supplierid': supplierid, 'accessSpeedId': accessSpeedId, 'InterfaceType': InterfaceType });
    }
    CapmanReport.FetchCityPOPSData = function (countryid, productid, subproductid) {
        return $http.post('Reports.aspx/FetchCityPOPSData', { 'countryid': countryid, 'productid': productid, 'subproductid': subproductid });
    }
    return CapmanReport;
});

app.factory('DefineStandardReport', function ($http) {
    var DefineStandardReport = {};
    DefineStandardReport.GetStandardReportProducts = function () {
        return $http.post('Reports.aspx/GetStandardReportProducts', {});
    }
    DefineStandardReport.GetStandardReportSubProducts = function (productId) {
        return $http.post('Reports.aspx/GetStandardReportSubProducts', { 'productId': productId });
    }
    DefineStandardReport.GetStandardReportName = function (productId, subProductId) {
        return $http.post('Reports.aspx/GetStandardReportName', { 'productId': productId, 'subProductId': subProductId });
    }
    DefineStandardReport.GetStandardColumnsData = function (reportId) {
        return $http.post('Reports.aspx/GetStandardColumnsData', { 'reportId': reportId });
    }
    DefineStandardReport.GetPOPCharacteristicsData = function (productId, subProductId) {
        return $http.post('Reports.aspx/GetPOPCharacteristicsData', { 'productId': productId, 'subProductId': subProductId });
    }
    DefineStandardReport.GetCharacteristicsData = function (productId) {
        return $http.post('Reports.aspx/GetCharacteristicsData', { 'productId': productId });
    }
    DefineStandardReport.AddNewReportColumn = function (productId, subProductId, reportId, strCharId, strOptionMatrixId, strColumnHeader1, strColumnHeader2, strColumnHeader3, strColumnValidCd, strProductMappedId, userId) {
        return $http.post('Reports.aspx/AddNewReportColumn', { 'productId': productId, 'subProductId': subProductId, 'reportId': reportId, 'strCharId': strCharId, 'strOptionMatrixId': strOptionMatrixId, 'strColumnHeader1': strColumnHeader1, 'strColumnHeader2': strColumnHeader2, 'strColumnHeader3': strColumnHeader3, 'strColumnValidCd': strColumnValidCd, 'strProductMappedId': strProductMappedId, 'userId': userId });
    }
    DefineStandardReport.GetEditColumnWidthData = function (productId) {
        return $http.post('Reports.aspx/GetEditColumnWidthData', { 'productId': productId });
    }
    DefineStandardReport.GetMappedProduct = function (productId) {
        return $http.post('Reports.aspx/GetMappedProduct', { 'productId': productId });
    }
    DefineStandardReport.GetCharID = function (productId, mappedProduct) {
        return $http.post('Reports.aspx/GetCharID', { 'productId': productId, 'mappedProduct': mappedProduct });
    }
    DefineStandardReport.GetCPEMaintenanceOptionsTab = function (productId, charId) {
        return $http.post('Reports.aspx/GetCPEMaintenanceOptionsTab', { 'productId': productId, 'charId': charId });
    }
    DefineStandardReport.GetCPERouterBundlesTab = function (productId) {
        return $http.post('Reports.aspx/GetCPERouterBundlesTab', { 'productId': productId });
    }
    DefineStandardReport.UpdateStandardReportColumnWidthInSpeedTabs = function (productId, subProductId, columnWidth) {
        return $http.post('Reports.aspx/UpdateStandardReportColumnWidthInSpeedTabs', { 'productId': productId, 'subProductId': subProductId, 'columnWidth': columnWidth });
    }
    DefineStandardReport.UpdateColumnsInCPEDataTabs = function (productId, CPERouterWidth, CPEMaintenanceWidth, validRouterCd, validMaintenanceCd) {
        return $http.post('Reports.aspx/UpdateColumnsInCPEDataTabs', { 'productId': productId, 'CPERouterWidth': CPERouterWidth, 'CPEMaintenanceWidth': CPEMaintenanceWidth, 'validRouterCd': validRouterCd, 'validMaintenanceCd': validMaintenanceCd });
    }
    DefineStandardReport.GetReportColumnReferenceData = function (productId, reportId) {
        return $http.post('Reports.aspx/GetReportColumnReferenceData', { 'productId': productId, 'reportId': reportId });
    }
    DefineStandardReport.UpdatePOPChar = function (productId, subProductId, strPOPChar, strColumnHeader1, strColumnHeader2, strColumnHeader3, ColumnValidCd) {
        return $http.post('Reports.aspx/UpdatePOPChar', { 'productId': productId, 'subProductId': subProductId, 'strPOPChar': strPOPChar, 'strColumnHeader1': strColumnHeader1, 'strColumnHeader2': strColumnHeader2, 'strColumnHeader3': strColumnHeader3, 'ColumnValidCd': ColumnValidCd });
    }
    DefineStandardReport.UpdateChar = function (productId, subProductId, reportId, strChar, charTypeId, strColumnHeader1, strColumnHeader2, strColumnHeader3, strColumnValidCd, userId, strProductMappedId, orderCd) {
        return $http.post('Reports.aspx/UpdateChar', { 'productId': productId, 'subProductId': subProductId, 'reportId': reportId, 'strChar': strChar, 'charTypeId': charTypeId, 'strColumnHeader1': strColumnHeader1, 'strColumnHeader2': strColumnHeader2, 'strColumnHeader3': strColumnHeader3, 'strColumnValidCd': strColumnValidCd, 'userId': userId, 'strProductMappedId': strProductMappedId, 'orderCd': orderCd });
    }
    DefineStandardReport.DeleteChar = function (reportId, orderCd) {
        return $http.post('Reports.aspx/DeleteChar', { 'reportId': reportId, 'orderCd': orderCd });
    }
    DefineStandardReport.UpdateDefineStandardData = function (productId, subProductId, reportId, standardColHeader, standardColWidth, StandardValid, StandardDisplayOrder, ColRefWidth, ColRefDisplayOrder, ColPOPWidth, ColPOPDisplayOrder, WrapTextData, SLAData, userId) {
        return $http.post('Reports.aspx/UpdateDefineStandardData', { 'productId': productId, 'subProductId': subProductId, 'reportId': reportId, 'standardColHeader': standardColHeader, 'standardColWidth': standardColWidth, 'StandardValid': StandardValid, 'StandardDisplayOrder': StandardDisplayOrder, 'ColRefWidth': ColRefWidth, 'ColRefDisplayOrder': ColRefDisplayOrder, 'ColPOPWidth': ColPOPWidth, 'ColPOPDisplayOrder': ColPOPDisplayOrder, 'WrapTextData': WrapTextData, 'SLAData': SLAData, 'userId': userId });
    }
    DefineStandardReport.GetdisplaySLAAttributesForProduct = function (productId, subProductId, reportId) {
        return $http.post('Reports.aspx/GetdisplaySLAAttributesForProduct', { 'productId': productId, 'subProductId': subProductId, 'reportId': reportId });
    }
    DefineStandardReport.GetUpdatedDateDetails = function (productId) {
        return $http.post('Reports.aspx/GetUpdatedDateDetails', { 'productId': productId });
    }
    DefineStandardReport.GetUpdatedDateDetailsForCharData = function (productId, reportId, orderCd) {
        return $http.post('Reports.aspx/GetUpdatedDateDetailsForCharData', { 'productId': productId, 'reportId': reportId, 'orderCd': orderCd });
    }
    DefineStandardReport.SaveSLAAttributeData = function (productId, colAssuranceWidth, colDeliveryWidth, SLAAssuranceColCd, SLADeliveryColCd, userId) {
        return $http.post('Reports.aspx/SaveSLAAttributeData', { 'productId': productId, 'colAssuranceWidth': colAssuranceWidth, 'colDeliveryWidth': colDeliveryWidth, 'SLAAssuranceColCd': SLAAssuranceColCd, 'SLADeliveryColCd': SLADeliveryColCd, 'userId': userId });
    }

    DefineStandardReport.UpdateSLAFlag = function (productId, reportId, subProductId, SLAFlag) {
        return $http.post('Reports.aspx/UpdateSLAFlag', { 'productId': productId, 'reportId': reportId, 'subProductId': subProductId, 'SLAFlag': SLAFlag });
    }
    DefineStandardReport.GetSLAUpdatedDateDetails = function (productId) {
        return $http.post('Reports.aspx/GetSLAUpdatedDateDetails', { 'productId': productId });
    }
    return DefineStandardReport;
});
app.factory('ServiceTypeProductMap', function ($http) {

    var ServiceTypeProductMap = {};
    ServiceTypeProductMap.GetServiceTypeProductMap = function (Report) {
        return $http.post('Reports.aspx/GetServiceTypeProductMap', { 'Report' : Report });
    }

    return ServiceTypeProductMap;
});

app.factory('ProductAccurateAdminfactory', function ($http) {

    var ProductAccurateAdminfactory = {};

    ProductAccurateAdminfactory.GetProductOwnerDetails = function () {

        return $http.post('UsersData.aspx/GetProductOwnerDetails', {});

    }

    return ProductAccurateAdminfactory;

});




app.factory('ProductAccurateUserDetailsFactory', function ($http) {


    var ProductAccurateUserDetailsFactory = {};
    // ProductId, CurrentProductOwner, OldProductOwner, OwnersList
    ProductAccurateUserDetailsFactory.PostCurrentUserDetails = function (ProductId, CurrentProductOwner, OldProductOwner) {
        //alert();

        return $http.post('ProductAccurateAdmin.aspx/PostCurrentUserDetails', { 'ProductId': ProductId, 'CurrentProductOwner': CurrentProductOwner,
            'OldProductOwner': OldProductOwner


        });
    }

    //alert("completed service call");
    return ProductAccurateUserDetailsFactory;

});








app.factory('userDatafactory', function ($http) {

    var userDatafactory = {};

    userDatafactory.GetUserStatus = function () {
        return $http.post('UsersData.aspx/GetUserStatus', {});

    }

    userDatafactory.CreateUserStatus = function (UserStatusId, UserStatusDesc, User_id) {
        return $http.post('UsersData.aspx/CreateUserStatus', { 'UserStatusId': UserStatusId, 'UserStatusDesc': UserStatusDesc, 'User_id': User_id });

    }

    userDatafactory.UpdateUserStatus = function (UserStatusId, UserStatusDesc, User_id) {
        return $http.post('UsersData.aspx/UpdateUserStatus', { 'UserStatusId': UserStatusId, 'UserStatusDesc': UserStatusDesc, 'User_id': User_id });

    }

    userDatafactory.DeleteUserStatus = function (UserStatusId) {
        return $http.post('UsersData.aspx/DeleteUserStatus', { 'UserStatusId': UserStatusId });

    }

    userDatafactory.GetUserCategory = function (UserCategoryId) {
        return $http.post('UsersData.aspx/GetUserCategory', { 'UserCategoryId': UserCategoryId });

    }

    userDatafactory.CreateUserCategory = function (UserCategoryId, UserCategoryDesc, User_id) {
        return $http.post('UsersData.aspx/CreateUserCategory', { 'UserCategoryId': UserCategoryId, 'UserCategoryDesc': UserCategoryDesc, 'User_id': User_id });

    }

    userDatafactory.UpdateUserCategory = function (UserCategoryId, UserCategoryDesc, User_id) {
        return $http.post('UsersData.aspx/UpdateUserCategory', { 'UserCategoryId': UserCategoryId, 'UserCategoryDesc': UserCategoryDesc, 'User_id': User_id });

    }

    userDatafactory.DeleteUserCategory = function (UserCategoryId) {
        return $http.post('UsersData.aspx/DeleteUserCategory', { 'UserCategoryId': UserCategoryId });

    }

    userDatafactory.GetProductOwnerStatus = function (ProductOwnerStatusId) {
        return $http.post('UsersData.aspx/GetProductOwnerStatus', { 'ProductOwnerStatusId': ProductOwnerStatusId });

    }

    userDatafactory.CreateProductOwnerStatus = function (ProductOwnerStatusId, ProductOwnerStatusDesc, User_id) {
        return $http.post('UsersData.aspx/CreateProductOwnerStatus', { 'ProductOwnerStatusId': ProductOwnerStatusId, 'ProductOwnerStatusDesc': ProductOwnerStatusDesc, 'User_id': User_id });

    }

    userDatafactory.UpdateProductOwnerStatus = function (ProductOwnerStatusId, ProductOwnerStatusDesc, User_id) {
        return $http.post('UsersData.aspx/UpdateProductOwnerStatus', { 'ProductOwnerStatusId': ProductOwnerStatusId, 'ProductOwnerStatusDesc': ProductOwnerStatusDesc, 'User_id': User_id });

    }

    userDatafactory.DeleteProductOwnerStatus = function (ProductOwnerStatusId) {
        return $http.post('UsersData.aspx/DeleteProductOwnerStatus', { 'ProductOwnerStatusId': ProductOwnerStatusId });

    }



    return userDatafactory;
});


// Restriction services------ Madan

app.factory('DistributorListFactory', function ($http) {

    var DistributorListFactory = {};

    DistributorListFactory.GetDistributors = function (Distributer) {

        return $http.post('SupplierRestriction.aspx/GetDistributorLstDetails', { 'Distributer': Distributer });

    }

    return DistributorListFactory;
});

app.factory('CountryListFactory', function ($http) {

    var CountryListFactory = {};

    CountryListFactory.GetCountry = function (Country) {

        return $http.post('SupplierRestriction.aspx/GetCountryLstDetails', { 'Country': Country });

    }

    return CountryListFactory;
});

app.factory('SupplierListFactory', function ($http) {

    var SupplierListFactory = {};

    SupplierListFactory.GetSupplier = function (Supplier) {

        return $http.post('SupplierRestriction.aspx/GetSupplierLstDetails', { 'Supplier': Supplier });

    }

    return SupplierListFactory;
});

app.factory('DistributorGridFactory', function ($http) {

    var DistributorGridFactory = {};

    DistributorGridFactory.GetDistributorsGrid = function (Distributer) {
        $(".pageLoaderOverlay").show();
        return $http.post('SupplierRestriction.aspx/GetSupplierGridDetails', { 'Distributer': Distributer });

    }

    return DistributorGridFactory;
});

app.factory('detailsInfo', function ($http) {
    var detailsInfo = {};
    detailsInfo.GetValue = function (btnvalue, DistributerValues, CountryValues, SupplierValues, tab) {

        return $http.post('SupplierRestriction.aspx/PostBGFROrg', { 'btnvalue': btnvalue, 'DistributerValues': DistributerValues, 'CountryValues': CountryValues, 'SupplierValues': SupplierValues, 'tab': tab });
    }
    return detailsInfo;
});

app.factory('deletedetailsInfo', function ($http) {
    var deletedetailsInfo = {};
    deletedetailsInfo.removeRow = function (btnvalue, DistributerValues, CountryValues, SupplierValues, tab) {

        return $http.post('SupplierRestriction.aspx/DeleteBGFROrg', { 'btnvalue': btnvalue, 'DistributerValues': DistributerValues, 'CountryValues': CountryValues, 'SupplierValues': SupplierValues, 'tab': tab });
    }
    return deletedetailsInfo;
});




app.factory('BTGFRListFactory', function ($http) {

    var BTGFRListFactory = {};

    BTGFRListFactory.GetBTGFR = function (Distributer) {

        return $http.post('SupplierRestriction.aspx/GetBTGFRLstDetails', { 'Distributer': Distributer });

    }

    return BTGFRListFactory;
});

app.factory('CountryListFactory', function ($http) {

    var CountryListFactory = {};

    CountryListFactory.GetCountry = function (Country) {

        return $http.post('SupplierRestriction.aspx/GetCountryLstDetails', { 'Country': Country });

    }

    return CountryListFactory;
});

app.factory('SupplierListFactory', function ($http) {

    var SupplierListFactory = {};

    SupplierListFactory.GetSupplier = function (Supplier) {

        return $http.post('SupplierRestriction.aspx/GetSupplierLstDetails', { 'Supplier': Supplier });

    }

    return SupplierListFactory;
});

app.factory('BTGFRGridFactory', function ($http) {

    var BTGFRGridFactory = {};

    BTGFRGridFactory.GetBTGFRGrid = function (Distributer) {
        $(".pageLoaderOverlay").show();
        return $http.post('SupplierRestriction.aspx/GetBTGFRGridDetails', { 'Distributer': Distributer });

    }

    return BTGFRGridFactory;
});


app.factory('detailsInfoBTGFR', function ($http) {
    var detailsInfoBTGFR = {};
    detailsInfoBTGFR.GetValue = function (btnvalue, DistributerValues, CountryValues, SupplierValues, tab) {

        return $http.post('SupplierRestriction.aspx/PostBGFROrg', { 'btnvalue': btnvalue, 'DistributerValues': DistributerValues, 'CountryValues': CountryValues, 'SupplierValues': SupplierValues, 'tab': tab })
    }
    return detailsInfoBTGFR;
});

app.factory('deletedetailsInfoBTGFR', function ($http) {
    var deletedetailsInfoBTGFR = {};
    deletedetailsInfoBTGFR.removeRow = function (btnvalue, DistributerValues, CountryValues, SupplierValues, tab) {

        return $http.post('SupplierRestriction.aspx/DeleteBGFROrg', { 'btnvalue': btnvalue, 'DistributerValues': DistributerValues, 'CountryValues': CountryValues, 'SupplierValues': SupplierValues, 'tab': tab })
    }
    return deletedetailsInfoBTGFR;
});


app.factory('OrgListFactory', function ($http) {

    var OrgListFactory = {};

    OrgListFactory.GetOrg = function (Distributer) {

        return $http.post('SupplierRestriction.aspx/GetOrganizationLstDetails', { 'Distributer': Distributer });

    }

    return OrgListFactory;
});

app.factory('CountryListFactory', function ($http) {

    var CountryListFactory = {};

    CountryListFactory.GetCountry = function (Country) {

        return $http.post('SupplierRestriction.aspx/GetCountryLstDetails', { 'Country': Country });

    }

    return CountryListFactory;
});

app.factory('SupplierListFactory', function ($http) {

    var SupplierListFactory = {};

    SupplierListFactory.GetSupplier = function (Supplier) {

        return $http.post('SupplierRestriction.aspx/GetSupplierLstDetails', { 'Supplier': Supplier });

    }

    return SupplierListFactory;
});

app.factory('OrgGridFactory', function ($http) {

    var OrgGridFactory = {};

    OrgGridFactory.GetOrgGrid = function (Distributer) {
        $(".pageLoaderOverlay").show();
        return $http.post('SupplierRestriction.aspx/GetOrganizationGridDetails', { 'Distributer': Distributer });

    }

    return OrgGridFactory;
});

app.factory('detailsInfoOrg', function ($http) {
    var detailsInfoOrg = {};
    detailsInfoOrg.GetValue = function (btnvalue, DistributerValues, CountryValues, SupplierValues) {

        return $http.post('SupplierRestriction.aspx/SaveAndDelete', { 'btnvalue': btnvalue, 'DistributerValues': DistributerValues, 'CountryValues': CountryValues, 'SupplierValues': SupplierValues })
    }
    return detailsInfoOrg;
});

app.factory('deletedetailsInfoOrg', function ($http) {
    var deletedetailsInfoOrg = {};
    deletedetailsInfoOrg.removeRow = function (btnvalue, DistributerValues, CountryValues, SupplierValues) {

        return $http.post('SupplierRestriction.aspx/SaveAndDelete', { 'btnvalue': btnvalue, 'DistributerValues': DistributerValues, 'CountryValues': CountryValues, 'SupplierValues': SupplierValues })
    }
    return deletedetailsInfoOrg;
});


app.factory('SLA', function ($http) {
    var SLA = {};
    SLA.getProducts = function () {
        return $http.post('SLABuilder.aspx/getProducts', {});
    }
    SLA.downloadFilebyFiletype = function (index, item) {
        // return $http.post('SLABuilder.aspx/downloadFilebyFiletype', { 'fileTypeId': index, 'productId': item });
        return $http.post('SLABuilder.aspx');
    }

    //Page_Load
    //Iam getting all Product,partner,priamry ,secondary,resilancy,coutry level data in single shot

    SLA.sendPageLoadData = function () {
        return $http.post('SLAMaster.aspx/sendPageLoadData', {});
    }

    SLA.sendPageLoadData1 = function () {
        return $http.post('SLAMaster.aspx/Datatos', {});
    }

    SLA.getSLAMasterDetailsData = function (productitem, countryitem, partneritem, resliencyitem, primaryaccessitem, secondaryaccessitem) {
        return $http.post('SLAMaster.aspx/getSLAMasterDetails', { 'product_ID': productitem, 'lstCountry': countryitem, 'ddlPartner': partneritem, 'lstResiliency': resliencyitem, 'ddlPrimary': primaryaccessitem, 'ddlSecondary': secondaryaccessitem });
    };


    //this service for bind the data of the table
    SLA.getSLAMasterDetailsData1 = function () {
        return $http.post('SLAMaster.aspx/getMasterDetails', {});
    };

    SLA.getProductLevelSLAbyProdId = function (ProductItem) {
        return $http.post('SLAMaster.aspx/getProductLevelSLAbyProdId', { 'ProductId': ProductItem })
    }

    SLA.getAccessConfigByProdType = function (ProductItem) {
        return $http.post('SLAMaster.aspx/getAccessConfigByProdType', { 'ProductId': ProductItem })
    }

    return SLA;
});


app.directive('moDateInput', function ($window) {
    return {
        require: '^ngModel',
        restrict: 'A',
        link: function (scope, elm, attrs, ctrl) {
            var moment = $window.moment;
            var dateFormat = attrs.moMediumDate;
            attrs.$observe('moDateInput', function (newValue) {
                if (dateFormat == newValue || !ctrl.$modelValue) return;
                dateFormat = newValue;
                ctrl.$modelValue = new Date(ctrl.$setViewValue);
            });

            ctrl.$formatters.unshift(function (modelValue) {
                scope = scope;
                if (!dateFormat || !modelValue) return "";
                var retVal = moment(modelValue).format(dateFormat);
                return retVal;
            });

            ctrl.$parsers.unshift(function (viewValue) {
                scope = scope;
                var date = moment(viewValue, dateFormat);
                return (date && date.isValid() && date.year() > 1950) ? date.toDate() : "";
            });
        }
    };
});

app.directive('moChangeProxy', function ($parse) {
    return {
        require: '^ngModel',
        restrict: 'A',
        link: function (scope, elm, attrs, ctrl) {
            var proxyExp = attrs.moChangeProxy;
            var modelExp = attrs.ngModel;
            scope.$watch(proxyExp, function (nVal) {
                if (nVal != ctrl.$modelValue)
                    $parse(modelExp).assign(scope, nVal);
            });
            elm.bind('blur', function () {
                var proxyVal = scope.$eval(proxyExp);
                if (ctrl.$modelValue != proxyVal) {
                    scope.$apply(function () {
                        $parse(proxyExp).assign(scope, ctrl.$modelValue);
                    });
                }
            });
        }
    };
});

app.directive('numericOnly', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, modelCtrl) {

            modelCtrl.$parsers.push(function (inputValue) {
                var transformedInput = inputValue ? inputValue.replace(/[^0-9]/g, '') : null;

                if (transformedInput != inputValue) {
                    modelCtrl.$setViewValue(transformedInput);
                    modelCtrl.$render();
                }

                angular.element(element).on("keypress", function (e) {
                    if (this.value.length == 4) e.preventDefault();
                });


                return transformedInput;
            });
        }
    };
});


app.config(function ($stateProvider, $urlRouterProvider) {

    //    $urlRouterProvider.otherwise('/admin');



    $stateProvider

    .state('CPECountryAvailibity', {      //CPE state Provider
        url: '/CPECountryAvailibity',
        templateUrl: 'Views/CPECountryAvailibity.htm'
    })
    .state('CaseDefinition', {
        url: '/CaseDefinition',
        templateUrl: 'Views/CaseDefinition.htm'
    })
    .state('CaseDefinition.AddCase', {
        url: '/AddCase?ProductID&&RegionID&&CountryID&&ProductName&&RegionName&&CountryName',
        templateUrl: 'Views/AddCase.htm'
    })
    .state('servicetype', {
        url: '/servicetype',
        templateUrl: 'Views/Servicetype.html'
    })
    .state('CPELeadTime&Status', {                //CPE state Provider
        url: '/CPELeadTime&Status',
        templateUrl: 'Views/CPELeadTimeStatus.htm'
    })
      .state('CPEBundlesCtrl', {                  //CPE state Provider
          url: '/CPEBundlesCtrl',
          templateUrl: 'Views/CPEBundles.htm'
      })
      .state('CPESupplierCtrl', {                  //CPE state Provider
          url: '/CPESupplierCtrl',
          templateUrl: 'Views/CPESupplier.htm'
      })
    .state('CPESupplierReportCtrl', {            //CPE state Provider
        url: '/CPESupplierReportCtrl',
        templateUrl: 'Views/CpeSupplierReport.htm'
    })
    .state('CPEMaintSuppReport', {              //CPE state Provider
        url: '/CPEMaintSuppReport',
        templateUrl: 'Views/ManufacturerDistributorMaintainerReport.htm'
    })
    .state('UserDetails', {

        url: '/UserDetails',
        templateUrl: 'Views/UserDetails.html'
    })
    .state('PrimaryProductOwner', {

        url: '/PrimaryProductOwner',
        templateUrl: 'Views/PrimaryProductOwner.html'
    })
    .state('UsersData', {

        url: '/UsersData',
        templateUrl: 'Views/UsersData.html'
    })
    .state('UserAccess', {

        url: '/UserAccess',
        templateUrl: 'Views/UserAccess.htm'
    })


    .state('FileUploads', {      //FileUpload state Provider added by sandeep
        url: '/FileUploads',
        templateUrl: 'Views/UploadFileHistory.htm'
    })
  

    .state('UpdateAnnouncements', {
        url: '/UpdateAnnouncements',
        templateUrl: 'Views/AnnoucementNew.htm'
    })


    .state('supplierRestriction', {
        url: '/supplierRestriction',
        templateUrl: 'Views/supplierRestriction.htm'
    })

   .state('AdminAvailView', {
       url: '/AdminAvailView',
       templateUrl: 'Views/GlobalReferences/AdminAvailView.htm'
   })
       .state('AdminBtgfrView', {
           url: '/AdminBtgfrView',
           templateUrl: 'Views/GlobalReferences/AdminBtgfrView.htm'
       })

       .state('AdminAddressView', {
           url: '/AdminAddressView',
           templateUrl: 'Views/GlobalReferences/AdminAddressView.htm'
       })
       .state('AdminDocumentationView', {
           url: '/AdminDocumentationView',
           templateUrl: 'Views/GlobalReferences/AdminDocumentationView.htm'
       })

       .state('AdminGlossary', {
           url: '/AdminGlossary',
           templateUrl: 'Views/GlobalReferences/AdminGlossary.htm'
       })
       .state('CallerAccess_Supplier', {
           url: '/CallerAccess_Supplier',
           templateUrl: 'Views/GlobalReferences/CallerAccess_Supplier.htm'
       })

        .state('Notes', {
            url: '/Notes',
            templateUrl: 'Views/GlobalReferences/Notes.htm'
        })
       .state('NotesCategory', {
           url: '/NotesCategory',
           templateUrl: 'Views/GlobalReferences/NotesCategory.htm'
       })

        .state('NotesPriority', {
            url: '/NotesPriority',
            templateUrl: 'Views/GlobalReferences/NotesPriority.htm'
        })

        .state('OrderAccessSpeed', {
            url: '/OrderAccessSpeed',
            templateUrl: 'Views/GlobalReferences/OrderAccessSpeed.htm'
        })

         .state('OrderPortSpeed', {
             url: '/OrderPortSpeed',
             templateUrl: 'Views/GlobalReferences/OrderPortSpeed.htm'
         })


        .state('UnitofMeasure', {
            url: '/UnitofMeasure',
            templateUrl: 'Views/GlobalReferences/UnitofMeasure.htm'
        })

         .state('MapUnitsofMeasure', {
             url: '/MapUnitsofMeasure',
             templateUrl: 'Views/GlobalReferences/MapUnitsofMeasure.htm'
         })


        .state('AccessSupplier', {
            url: '/AccessSupplier',
            templateUrl: 'Views/GlobalReferences/AccessSupplier.htm'
        })

         .state('DistributorCompanies', {
             url: '/DistributorCompanies',
             templateUrl: 'Views/GlobalReferences/DistributorCompanies.htm'
         })
    
    .state('SLABuilderFile', {
        url: '/SLABuilderFile',
        templateUrl: 'Views/SLABuilderFile.htm'
    })
    .state('SLAMaster', {
        url: '/SLAMaster',
        templateUrl: 'Views/SLAMaster.htm'
    })
    .state('ProductLevelSLA', {
        url: '/ProductLevelSLA',
        templateUrl: 'Views/ProductLevelSLA.htm'
    })
    .state('MCU', {
        url: '/MCU',
        templateUrl: 'Views/MCU.htm'
    })
    
    .state('MCU.Poplevel', {
        url: '/Poplevel?productId',
        templateUrl: 'Views/Masscaseupdate/mcu_ethernet_parent.htm'
    })
        .state('MCU.CountryLevel', {
            url: '/CountryLevel?productId',
            templateUrl: 'Views/Masscaseupdate/MCUCountryLevel.htm'
        })
        .state('MCU.CityLevel', {
            url: '/CityLevel',
            templateUrl: 'Views/Masscaseupdate/MCUCityLevel.htm'
        })
        .state('MCU.Multipop', {
            url: '/Multipop',
            templateUrl: 'Views/Masscaseupdate/MCUMultiopop.htm'
        })
         .state('MCU.MCUAccess', {
             url: '/MCUAccess',
             templateUrl: 'Views/Masscaseupdate/MCUAccess.htm'
         })



        
    //    .state('MonthlyUsageReport', {
    //        url: '/MonthlyUsageReport',
    //        templateUrl: 'Views/MonthlyUsaseReport.html'
    //    })
    //    .state('WeeklyUsageReport', {
    //        url: '/WeeklyUsageReport',
    //        templateUrl: 'Views/WeeklyUsageReport.htm'
         //    })
         .state('StandardReports_New', {
             url: '/StandardReports_New',
             templateUrl: 'Views/StandardReports_New.htm'
         })
    .state('StandardReports', {
        url: '/StandardReports',
        templateUrl: 'Views/StandardReports.htm'
    })
    .state('UsageReport', {
        url: '/UsageReport',
        templateUrl: 'Views/UsageReport.htm'
    })
    .state('CapmanReports', {
        url: '/CapmanReports',
        templateUrl: 'Views/CapmanReports.htm'
    })
    .state('DefineStandardReport', {
        url: '/DefineStandardReport',
        templateUrl: 'Views/DefineStandardReport.htm'
    })
    .state('NotesAuditReport', {
        url: '/NotesAuditReport',
        templateUrl: 'Views/NotesAuditReport.htm'
    }).state('CaseAuditReport', {
        url: '/CaseAuditReport',
        templateUrl: 'Views/CaseAuditReport.htm'

    })
    .state('AccessSupplierReport', {
        url: '/AccessSupplierReport',
        templateUrl: 'Views/AccessSupplierReport.htm'
    })
.state('CaseDetailAuditReport', {
    url: '/CaseDetailAuditReport?CaseId&&modServiceType&&modProduct&&CountryName',
    templateUrl: 'Views/CaseDetailAuditReport.htm'
}).state('BatchCaseAuditReport', {
    url: '/BatchCaseAuditReport',
    templateUrl: 'Views/BatchCaseAuditReport.htm'

}).state('CapmanReport', {
    url: '/CapmanReport',
    templateUrl: 'Views/CapmanReport.htm'
}).


//@madan product definations
state('Servicetype', {
    url: '/Servicetype',
    templateUrl: 'Views/Servicetype.html'
}).state('SubProduct', {
    url: '/SubProduct',
    templateUrl: 'Views/SubProduct.html'
}).state('ProductLocationLevel', {
    url: '/ProductLocationLevel',
    templateUrl: 'Views/ProductLocationLevel.html'
}).state('CharactericsticType', {
    url: '/CharactericsticType',
    templateUrl: 'Views/CharactericsticType.html'
}).state('Charactericstic', {
    url: '/Charactericstic',
    templateUrl: 'Views/Charactericstic.html'
}).state('DefineProduct', {
    url: '/DefineProduct',
    templateUrl: 'Views/DefineProduct.html'
}).state('PopTypeMapping', {
    url: '/PopTypeMapping',
    templateUrl: 'Views/PopTypeMapping.html'

}).state('CaseDefinition.AdminDSLCase', {
    url: '/AdminDSLCase?ProductCd&&Region',
    templateUrl: 'Views/AdmindslcaseDetails.htm'
}).state('AdminDSLCaseDetailsUpdate', {
    url: '/AdminDSLCaseDetailsUpdate',
    templateUrl: 'Views/AdminDSLCaseUpdate.htm'

}).state('Product', {
    url: '/Product',
    templateUrl: 'Views/Product.html'

}).state('DistributorProductMapping', {
    url: '/DistributorProductMapping',
    templateUrl: 'Views/DistributorProductMapping.html'

}).state('DisplayOrder', {
    url: '/DisplayOrder',
    templateUrl: 'Views/DisplayOrder.html'

}).state('CaseDefinition.AdminDSLCase.AdminDSLCaseDetailsUpdate', {
    url: '/AdminDSLCaseDetailsUpdate?ProductCd&&Region&&CountryName&&CaseAvailability&&Validity&&CaseId&&CountryId',
    templateUrl: 'Views/AdminDSLCaseUpdate.htm'

});

});


// Cofiguration   of all routes -----Madan


